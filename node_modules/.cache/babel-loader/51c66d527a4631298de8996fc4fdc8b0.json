{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.4.1): tab.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\nimport $ from 'jquery';\nimport Util from './util';\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME = 'tab';\nconst VERSION = '4.4.1';\nconst DATA_KEY = 'bs.tab';\nconst EVENT_KEY = `.${DATA_KEY}`;\nconst DATA_API_KEY = '.data-api';\nconst JQUERY_NO_CONFLICT = $.fn[NAME];\nconst Event = {\n  HIDE: `hide${EVENT_KEY}`,\n  HIDDEN: `hidden${EVENT_KEY}`,\n  SHOW: `show${EVENT_KEY}`,\n  SHOWN: `shown${EVENT_KEY}`,\n  CLICK_DATA_API: `click${EVENT_KEY}${DATA_API_KEY}`\n};\nconst ClassName = {\n  DROPDOWN_MENU: 'dropdown-menu',\n  ACTIVE: 'active',\n  DISABLED: 'disabled',\n  FADE: 'fade',\n  SHOW: 'show'\n};\nconst Selector = {\n  DROPDOWN: '.dropdown',\n  NAV_LIST_GROUP: '.nav, .list-group',\n  ACTIVE: '.active',\n  ACTIVE_UL: '> li > .active',\n  DATA_TOGGLE: '[data-toggle=\"tab\"], [data-toggle=\"pill\"], [data-toggle=\"list\"]',\n  DROPDOWN_TOGGLE: '.dropdown-toggle',\n  DROPDOWN_ACTIVE_CHILD: '> .dropdown-menu .active'\n};\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Tab {\n  constructor(element) {\n    this._element = element;\n  } // Getters\n\n\n  static get VERSION() {\n    return VERSION;\n  } // Public\n\n\n  show() {\n    if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $(this._element).hasClass(ClassName.ACTIVE) || $(this._element).hasClass(ClassName.DISABLED)) {\n      return;\n    }\n\n    let target;\n    let previous;\n    const listElement = $(this._element).closest(Selector.NAV_LIST_GROUP)[0];\n    const selector = Util.getSelectorFromElement(this._element);\n\n    if (listElement) {\n      const itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? Selector.ACTIVE_UL : Selector.ACTIVE;\n      previous = $.makeArray($(listElement).find(itemSelector));\n      previous = previous[previous.length - 1];\n    }\n\n    const hideEvent = $.Event(Event.HIDE, {\n      relatedTarget: this._element\n    });\n    const showEvent = $.Event(Event.SHOW, {\n      relatedTarget: previous\n    });\n\n    if (previous) {\n      $(previous).trigger(hideEvent);\n    }\n\n    $(this._element).trigger(showEvent);\n\n    if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {\n      return;\n    }\n\n    if (selector) {\n      target = document.querySelector(selector);\n    }\n\n    this._activate(this._element, listElement);\n\n    const complete = () => {\n      const hiddenEvent = $.Event(Event.HIDDEN, {\n        relatedTarget: this._element\n      });\n      const shownEvent = $.Event(Event.SHOWN, {\n        relatedTarget: previous\n      });\n      $(previous).trigger(hiddenEvent);\n      $(this._element).trigger(shownEvent);\n    };\n\n    if (target) {\n      this._activate(target, target.parentNode, complete);\n    } else {\n      complete();\n    }\n  }\n\n  dispose() {\n    $.removeData(this._element, DATA_KEY);\n    this._element = null;\n  } // Private\n\n\n  _activate(element, container, callback) {\n    const activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? $(container).find(Selector.ACTIVE_UL) : $(container).children(Selector.ACTIVE);\n    const active = activeElements[0];\n    const isTransitioning = callback && active && $(active).hasClass(ClassName.FADE);\n\n    const complete = () => this._transitionComplete(element, active, callback);\n\n    if (active && isTransitioning) {\n      const transitionDuration = Util.getTransitionDurationFromElement(active);\n      $(active).removeClass(ClassName.SHOW).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\n    } else {\n      complete();\n    }\n  }\n\n  _transitionComplete(element, active, callback) {\n    if (active) {\n      $(active).removeClass(ClassName.ACTIVE);\n      const dropdownChild = $(active.parentNode).find(Selector.DROPDOWN_ACTIVE_CHILD)[0];\n\n      if (dropdownChild) {\n        $(dropdownChild).removeClass(ClassName.ACTIVE);\n      }\n\n      if (active.getAttribute('role') === 'tab') {\n        active.setAttribute('aria-selected', false);\n      }\n    }\n\n    $(element).addClass(ClassName.ACTIVE);\n\n    if (element.getAttribute('role') === 'tab') {\n      element.setAttribute('aria-selected', true);\n    }\n\n    Util.reflow(element);\n\n    if (element.classList.contains(ClassName.FADE)) {\n      element.classList.add(ClassName.SHOW);\n    }\n\n    if (element.parentNode && $(element.parentNode).hasClass(ClassName.DROPDOWN_MENU)) {\n      const dropdownElement = $(element).closest(Selector.DROPDOWN)[0];\n\n      if (dropdownElement) {\n        const dropdownToggleList = [].slice.call(dropdownElement.querySelectorAll(Selector.DROPDOWN_TOGGLE));\n        $(dropdownToggleList).addClass(ClassName.ACTIVE);\n      }\n\n      element.setAttribute('aria-expanded', true);\n    }\n\n    if (callback) {\n      callback();\n    }\n  } // Static\n\n\n  static _jQueryInterface(config) {\n    return this.each(function () {\n      const $this = $(this);\n      let data = $this.data(DATA_KEY);\n\n      if (!data) {\n        data = new Tab(this);\n        $this.data(DATA_KEY, data);\n      }\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config]();\n      }\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\n$(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\n  event.preventDefault();\n\n  Tab._jQueryInterface.call($(this), 'show');\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\n$.fn[NAME] = Tab._jQueryInterface;\n$.fn[NAME].Constructor = Tab;\n\n$.fn[NAME].noConflict = () => {\n  $.fn[NAME] = JQUERY_NO_CONFLICT;\n  return Tab._jQueryInterface;\n};\n\nexport default Tab;","map":null,"metadata":{},"sourceType":"module"}