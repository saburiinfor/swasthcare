{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.4.1): dropdown.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport Util from './util';\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME = 'dropdown';\nconst VERSION = '4.4.1';\nconst DATA_KEY = 'bs.dropdown';\nconst EVENT_KEY = `.${DATA_KEY}`;\nconst DATA_API_KEY = '.data-api';\nconst JQUERY_NO_CONFLICT = $.fn[NAME];\nconst ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key\n\nconst SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key\n\nconst TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key\n\nconst ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key\n\nconst ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key\n\nconst RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)\n\nconst REGEXP_KEYDOWN = new RegExp(`${ARROW_UP_KEYCODE}|${ARROW_DOWN_KEYCODE}|${ESCAPE_KEYCODE}`);\nconst Event = {\n  HIDE: `hide${EVENT_KEY}`,\n  HIDDEN: `hidden${EVENT_KEY}`,\n  SHOW: `show${EVENT_KEY}`,\n  SHOWN: `shown${EVENT_KEY}`,\n  CLICK: `click${EVENT_KEY}`,\n  CLICK_DATA_API: `click${EVENT_KEY}${DATA_API_KEY}`,\n  KEYDOWN_DATA_API: `keydown${EVENT_KEY}${DATA_API_KEY}`,\n  KEYUP_DATA_API: `keyup${EVENT_KEY}${DATA_API_KEY}`\n};\nconst ClassName = {\n  DISABLED: 'disabled',\n  SHOW: 'show',\n  DROPUP: 'dropup',\n  DROPRIGHT: 'dropright',\n  DROPLEFT: 'dropleft',\n  MENURIGHT: 'dropdown-menu-right',\n  MENULEFT: 'dropdown-menu-left',\n  POSITION_STATIC: 'position-static'\n};\nconst Selector = {\n  DATA_TOGGLE: '[data-toggle=\"dropdown\"]',\n  FORM_CHILD: '.dropdown form',\n  MENU: '.dropdown-menu',\n  NAVBAR_NAV: '.navbar-nav',\n  VISIBLE_ITEMS: '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)'\n};\nconst AttachmentMap = {\n  TOP: 'top-start',\n  TOPEND: 'top-end',\n  BOTTOM: 'bottom-start',\n  BOTTOMEND: 'bottom-end',\n  RIGHT: 'right-start',\n  RIGHTEND: 'right-end',\n  LEFT: 'left-start',\n  LEFTEND: 'left-end'\n};\nconst Default = {\n  offset: 0,\n  flip: true,\n  boundary: 'scrollParent',\n  reference: 'toggle',\n  display: 'dynamic',\n  popperConfig: null\n};\nconst DefaultType = {\n  offset: '(number|string|function)',\n  flip: 'boolean',\n  boundary: '(string|element)',\n  reference: '(string|element)',\n  display: 'string',\n  popperConfig: '(null|object)'\n};\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Dropdown {\n  constructor(element, config) {\n    this._element = element;\n    this._popper = null;\n    this._config = this._getConfig(config);\n    this._menu = this._getMenuElement();\n    this._inNavbar = this._detectNavbar();\n\n    this._addEventListeners();\n  } // Getters\n\n\n  static get VERSION() {\n    return VERSION;\n  }\n\n  static get Default() {\n    return Default;\n  }\n\n  static get DefaultType() {\n    return DefaultType;\n  } // Public\n\n\n  toggle() {\n    if (this._element.disabled || $(this._element).hasClass(ClassName.DISABLED)) {\n      return;\n    }\n\n    const isActive = $(this._menu).hasClass(ClassName.SHOW);\n\n    Dropdown._clearMenus();\n\n    if (isActive) {\n      return;\n    }\n\n    this.show(true);\n  }\n\n  show(usePopper = false) {\n    if (this._element.disabled || $(this._element).hasClass(ClassName.DISABLED) || $(this._menu).hasClass(ClassName.SHOW)) {\n      return;\n    }\n\n    const relatedTarget = {\n      relatedTarget: this._element\n    };\n    const showEvent = $.Event(Event.SHOW, relatedTarget);\n\n    const parent = Dropdown._getParentFromElement(this._element);\n\n    $(parent).trigger(showEvent);\n\n    if (showEvent.isDefaultPrevented()) {\n      return;\n    } // Disable totally Popper.js for Dropdown in Navbar\n\n\n    if (!this._inNavbar && usePopper) {\n      /**\n       * Check for Popper dependency\n       * Popper - https://popper.js.org\n       */\n      if (typeof Popper === 'undefined') {\n        throw new TypeError('Bootstrap\\'s dropdowns require Popper.js (https://popper.js.org/)');\n      }\n\n      let referenceElement = this._element;\n\n      if (this._config.reference === 'parent') {\n        referenceElement = parent;\n      } else if (Util.isElement(this._config.reference)) {\n        referenceElement = this._config.reference; // Check if it's jQuery element\n\n        if (typeof this._config.reference.jquery !== 'undefined') {\n          referenceElement = this._config.reference[0];\n        }\n      } // If boundary is not `scrollParent`, then set position to `static`\n      // to allow the menu to \"escape\" the scroll parent's boundaries\n      // https://github.com/twbs/bootstrap/issues/24251\n\n\n      if (this._config.boundary !== 'scrollParent') {\n        $(parent).addClass(ClassName.POSITION_STATIC);\n      }\n\n      this._popper = new Popper(referenceElement, this._menu, this._getPopperConfig());\n    } // If this is a touch-enabled device we add extra\n    // empty mouseover listeners to the body's immediate children;\n    // only needed because of broken event delegation on iOS\n    // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html\n\n\n    if ('ontouchstart' in document.documentElement && $(parent).closest(Selector.NAVBAR_NAV).length === 0) {\n      $(document.body).children().on('mouseover', null, $.noop);\n    }\n\n    this._element.focus();\n\n    this._element.setAttribute('aria-expanded', true);\n\n    $(this._menu).toggleClass(ClassName.SHOW);\n    $(parent).toggleClass(ClassName.SHOW).trigger($.Event(Event.SHOWN, relatedTarget));\n  }\n\n  hide() {\n    if (this._element.disabled || $(this._element).hasClass(ClassName.DISABLED) || !$(this._menu).hasClass(ClassName.SHOW)) {\n      return;\n    }\n\n    const relatedTarget = {\n      relatedTarget: this._element\n    };\n    const hideEvent = $.Event(Event.HIDE, relatedTarget);\n\n    const parent = Dropdown._getParentFromElement(this._element);\n\n    $(parent).trigger(hideEvent);\n\n    if (hideEvent.isDefaultPrevented()) {\n      return;\n    }\n\n    if (this._popper) {\n      this._popper.destroy();\n    }\n\n    $(this._menu).toggleClass(ClassName.SHOW);\n    $(parent).toggleClass(ClassName.SHOW).trigger($.Event(Event.HIDDEN, relatedTarget));\n  }\n\n  dispose() {\n    $.removeData(this._element, DATA_KEY);\n    $(this._element).off(EVENT_KEY);\n    this._element = null;\n    this._menu = null;\n\n    if (this._popper !== null) {\n      this._popper.destroy();\n\n      this._popper = null;\n    }\n  }\n\n  update() {\n    this._inNavbar = this._detectNavbar();\n\n    if (this._popper !== null) {\n      this._popper.scheduleUpdate();\n    }\n  } // Private\n\n\n  _addEventListeners() {\n    $(this._element).on(Event.CLICK, event => {\n      event.preventDefault();\n      event.stopPropagation();\n      this.toggle();\n    });\n  }\n\n  _getConfig(config) {\n    config = { ...this.constructor.Default,\n      ...$(this._element).data(),\n      ...config\n    };\n    Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);\n    return config;\n  }\n\n  _getMenuElement() {\n    if (!this._menu) {\n      const parent = Dropdown._getParentFromElement(this._element);\n\n      if (parent) {\n        this._menu = parent.querySelector(Selector.MENU);\n      }\n    }\n\n    return this._menu;\n  }\n\n  _getPlacement() {\n    const $parentDropdown = $(this._element.parentNode);\n    let placement = AttachmentMap.BOTTOM; // Handle dropup\n\n    if ($parentDropdown.hasClass(ClassName.DROPUP)) {\n      placement = AttachmentMap.TOP;\n\n      if ($(this._menu).hasClass(ClassName.MENURIGHT)) {\n        placement = AttachmentMap.TOPEND;\n      }\n    } else if ($parentDropdown.hasClass(ClassName.DROPRIGHT)) {\n      placement = AttachmentMap.RIGHT;\n    } else if ($parentDropdown.hasClass(ClassName.DROPLEFT)) {\n      placement = AttachmentMap.LEFT;\n    } else if ($(this._menu).hasClass(ClassName.MENURIGHT)) {\n      placement = AttachmentMap.BOTTOMEND;\n    }\n\n    return placement;\n  }\n\n  _detectNavbar() {\n    return $(this._element).closest('.navbar').length > 0;\n  }\n\n  _getOffset() {\n    const offset = {};\n\n    if (typeof this._config.offset === 'function') {\n      offset.fn = data => {\n        data.offsets = { ...data.offsets,\n          ...(this._config.offset(data.offsets, this._element) || {})\n        };\n        return data;\n      };\n    } else {\n      offset.offset = this._config.offset;\n    }\n\n    return offset;\n  }\n\n  _getPopperConfig() {\n    const popperConfig = {\n      placement: this._getPlacement(),\n      modifiers: {\n        offset: this._getOffset(),\n        flip: {\n          enabled: this._config.flip\n        },\n        preventOverflow: {\n          boundariesElement: this._config.boundary\n        }\n      }\n    }; // Disable Popper.js if we have a static display\n\n    if (this._config.display === 'static') {\n      popperConfig.modifiers.applyStyle = {\n        enabled: false\n      };\n    }\n\n    return { ...popperConfig,\n      ...this._config.popperConfig\n    };\n  } // Static\n\n\n  static _jQueryInterface(config) {\n    return this.each(function () {\n      let data = $(this).data(DATA_KEY);\n\n      const _config = typeof config === 'object' ? config : null;\n\n      if (!data) {\n        data = new Dropdown(this, _config);\n        $(this).data(DATA_KEY, data);\n      }\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config]();\n      }\n    });\n  }\n\n  static _clearMenus(event) {\n    if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === 'keyup' && event.which !== TAB_KEYCODE)) {\n      return;\n    }\n\n    const toggles = [].slice.call(document.querySelectorAll(Selector.DATA_TOGGLE));\n\n    for (let i = 0, len = toggles.length; i < len; i++) {\n      const parent = Dropdown._getParentFromElement(toggles[i]);\n\n      const context = $(toggles[i]).data(DATA_KEY);\n      const relatedTarget = {\n        relatedTarget: toggles[i]\n      };\n\n      if (event && event.type === 'click') {\n        relatedTarget.clickEvent = event;\n      }\n\n      if (!context) {\n        continue;\n      }\n\n      const dropdownMenu = context._menu;\n\n      if (!$(parent).hasClass(ClassName.SHOW)) {\n        continue;\n      }\n\n      if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) && $.contains(parent, event.target)) {\n        continue;\n      }\n\n      const hideEvent = $.Event(Event.HIDE, relatedTarget);\n      $(parent).trigger(hideEvent);\n\n      if (hideEvent.isDefaultPrevented()) {\n        continue;\n      } // If this is a touch-enabled device we remove the extra\n      // empty mouseover listeners we added for iOS support\n\n\n      if ('ontouchstart' in document.documentElement) {\n        $(document.body).children().off('mouseover', null, $.noop);\n      }\n\n      toggles[i].setAttribute('aria-expanded', 'false');\n\n      if (context._popper) {\n        context._popper.destroy();\n      }\n\n      $(dropdownMenu).removeClass(ClassName.SHOW);\n      $(parent).removeClass(ClassName.SHOW).trigger($.Event(Event.HIDDEN, relatedTarget));\n    }\n  }\n\n  static _getParentFromElement(element) {\n    let parent;\n    const selector = Util.getSelectorFromElement(element);\n\n    if (selector) {\n      parent = document.querySelector(selector);\n    }\n\n    return parent || element.parentNode;\n  } // eslint-disable-next-line complexity\n\n\n  static _dataApiKeydownHandler(event) {\n    // If not input/textarea:\n    //  - And not a key in REGEXP_KEYDOWN => not a dropdown command\n    // If input/textarea:\n    //  - If space key => not a dropdown command\n    //  - If key is other than escape\n    //    - If key is not up or down => not a dropdown command\n    //    - If trigger inside the menu => not a dropdown command\n    if (/input|textarea/i.test(event.target.tagName) ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE && (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE || $(event.target).closest(Selector.MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {\n      return;\n    }\n\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (this.disabled || $(this).hasClass(ClassName.DISABLED)) {\n      return;\n    }\n\n    const parent = Dropdown._getParentFromElement(this);\n\n    const isActive = $(parent).hasClass(ClassName.SHOW);\n\n    if (!isActive && event.which === ESCAPE_KEYCODE) {\n      return;\n    }\n\n    if (!isActive || isActive && (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE)) {\n      if (event.which === ESCAPE_KEYCODE) {\n        const toggle = parent.querySelector(Selector.DATA_TOGGLE);\n        $(toggle).trigger('focus');\n      }\n\n      $(this).trigger('click');\n      return;\n    }\n\n    const items = [].slice.call(parent.querySelectorAll(Selector.VISIBLE_ITEMS)).filter(item => $(item).is(':visible'));\n\n    if (items.length === 0) {\n      return;\n    }\n\n    let index = items.indexOf(event.target);\n\n    if (event.which === ARROW_UP_KEYCODE && index > 0) {\n      // Up\n      index--;\n    }\n\n    if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {\n      // Down\n      index++;\n    }\n\n    if (index < 0) {\n      index = 0;\n    }\n\n    items[index].focus();\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\n$(document).on(Event.KEYDOWN_DATA_API, Selector.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event.KEYDOWN_DATA_API, Selector.MENU, Dropdown._dataApiKeydownHandler).on(`${Event.CLICK_DATA_API} ${Event.KEYUP_DATA_API}`, Dropdown._clearMenus).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\n  event.preventDefault();\n  event.stopPropagation();\n\n  Dropdown._jQueryInterface.call($(this), 'toggle');\n}).on(Event.CLICK_DATA_API, Selector.FORM_CHILD, e => {\n  e.stopPropagation();\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\n$.fn[NAME] = Dropdown._jQueryInterface;\n$.fn[NAME].Constructor = Dropdown;\n\n$.fn[NAME].noConflict = () => {\n  $.fn[NAME] = JQUERY_NO_CONFLICT;\n  return Dropdown._jQueryInterface;\n};\n\nexport default Dropdown;","map":null,"metadata":{},"sourceType":"module"}