{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.negate = negate;\nexports.printIt = printIt;\nexports.first = first;\nexports.tail = tail;\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar curry = exports.curry = function curry(fn) {\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return fn.length > args.length ? curry(fn.bind.apply(fn, [null].concat(args))) : fn.apply(undefined, args);\n  };\n};\n\nvar assoc = exports.assoc = curry(function (key, val, obj) {\n  return _extends({}, obj, _defineProperty({}, key, val));\n});\nvar assocPath = exports.assocPath = curry(function (keyPath, val, obj) {\n  if (keyPath.length === 0) {\n    return val;\n  }\n\n  if (keyPath.length === 1) {\n    return assoc(keyPath[0], val, obj);\n  } else {\n    return _extends({}, obj, _defineProperty({}, keyPath[0], assocPath(keyPath.slice(1), val, obj[keyPath[0]])));\n  }\n}); // concatenate two arrays\n// if set1 = [2, 4, 5] and set2 = [6, 0] then concat(set1, set2) = [2, 4, 5, 6, 0]\n\nvar concat = exports.concat = curry(function (set1, set2) {\n  set1 = set1 || [];\n  set2 = set2 || [];\n  var idx = 0;\n  var result = [];\n\n  while (idx < set1.length) {\n    result[result.length] = set1[idx++];\n  }\n\n  idx = 0;\n\n  while (idx < set2.length) {\n    result[result.length] = set2[idx++];\n  }\n\n  return result;\n});\n/**\n * given an object and a property name, returns the value of that property in the object\n * super complicated :)\n * but get really useful as a curried function\n */\n\nvar prop = exports.prop = curry(function (prop, obj) {\n  return obj[prop];\n});\n/**\n * given a property name and a value, check if the property in the object equals the given value\n * e.g. propEq('id', 1, {id: 1, name: 'mukesh'}) === true\n * e.g. propEq('id', 2, {id: 1, name: 'mukesh'}) === false\n */\n\nvar propEq = exports.propEq = curry(function (prop, val, obj) {\n  return equals(val, obj[prop]);\n});\n/**\n * Tells whether the two objects have same value for a property\n * E.g. p1 = {fname: 'rustom', lname: 'yadav'}; p2 = { fname: 'kuldev', lname: 'yadav'}\n * then eqProps('lname', p1, p2) === true\n * but eqProps('fname', p1, p2) === false\n */\n\nvar eqProps = exports.eqProps = curry(function (prop, o1, o2) {\n  return equals(o1[prop], o2[prop]);\n});\n/**\n * In a given list, update the value at a particular index\n * E.g. update(10, 2, [0,1,2,3,4]) === [0,1,10,3,4]\n */\n\nvar update = exports.update = curry(function (index, val, arr) {\n  if (index >= 0 && index < arr.length) {\n    return [].concat(_toConsumableArray(arr.slice(0, index)), [val], _toConsumableArray(arr.slice(index + 1)));\n  } else {\n    return arr;\n  }\n});\n/**\n * find a value inside a list/array and replace with a given value\n */\n\nvar findAndUpdate = exports.findAndUpdate = curry(function (findFn, val, arr) {\n  var index = arr.findIndex(findFn);\n\n  if (index >= 0) {\n    return update(index, val, arr);\n  } else {\n    return arr;\n  }\n}); // prepend an element to an array\n// e.g. prepend(4, [0, 1]) = [4, 0, 1]\n\nvar prepend = exports.prepend = curry(function (el, arr) {\n  return concat([el], arr);\n}); // append an element to end of an array\n// e.g. append(4, [0, 1]) = [0, 1, 4]\n\nvar append = exports.append = curry(function (el, arr) {\n  return concat(arr, [el]);\n});\n\nvar pipe = exports.pipe = function pipe() {\n  for (var _len2 = arguments.length, fns = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    fns[_key2] = arguments[_key2];\n  }\n\n  return function () {\n    return fns.reduce(function (acc, fn) {\n      return [fn.apply(null, acc)];\n    }, arguments)[0];\n  };\n};\n\nfunction negate(fn, context) {\n  return function () {\n    return !fn.apply(context, arguments);\n  };\n}\n\nvar dedupe = exports.dedupe = curry(function (arr, fn) {\n  return arr.filter(function (item, index, self) {\n    return index === self.findIndex(fn.bind(null, item));\n  });\n});\nvar equals = exports.equals = curry(function (a, b) {\n  return a === b;\n});\nvar eqBy = exports.eqBy = curry(function (fn, a, b) {\n  return equals(fn.call(null, a), fn.call(null, b));\n});\nvar find = exports.find = curry(function (pred, arr) {\n  return arr.find(pred);\n});\n\nfunction printIt(item) {\n  console.log(\"to print\", item);\n  return item;\n}\n\nvar without = exports.without = curry(function (discardArr, arr) {\n  return arr.filter(function (item) {\n    return !discardArr.some(equals(item));\n  });\n});\nvar startsWith = exports.startsWith = curry(function (prefix, str) {\n  if (!str) {\n    return false;\n  } else {\n    return str.indexOf(prefix) === 0;\n  }\n});\n\nfunction first(list) {\n  return list[0];\n}\n\nvar head = exports.head = first;\n\nfunction tail(list) {\n  return list.slice(1);\n}\n\nvar any = exports.any = curry(function (pred, list) {\n  if (list && list.some && typeof list.some === \"function\") {\n    return list.some(pred);\n  } else {\n    return list.reduce(function (acc, item) {\n      return acc || pred(item);\n    }, false);\n  }\n});\nvar findIndex = exports.findIndex = curry(function (finder, list) {\n  if (!list) {\n    return -1;\n  }\n\n  var itemIndex = -1;\n\n  for (var i = 0; i < list.length; i++) {\n    if (finder(list[i])) {\n      itemIndex = i;\n      break;\n    }\n  }\n\n  return itemIndex;\n});\nvar R = {\n  any: any,\n  curry: curry,\n  assoc: assoc,\n  assocPath: assocPath,\n  append: append,\n  prepend: prepend,\n  concat: concat,\n  pipe: pipe,\n  negate: negate,\n  dedupe: dedupe,\n  equals: equals,\n  eqBy: eqBy,\n  prop: prop,\n  propEq: propEq,\n  eqProps: eqProps,\n  find: find,\n  without: without,\n  update: update,\n  printIt: printIt,\n  first: first,\n  head: head,\n  tail: tail,\n  startsWith: startsWith,\n  findIndex: findIndex\n};\nexports.default = R;","map":null,"metadata":{},"sourceType":"script"}