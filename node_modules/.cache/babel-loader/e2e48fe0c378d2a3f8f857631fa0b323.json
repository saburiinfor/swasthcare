{"ast":null,"code":"var _jsxFileName = \"/Users/lravikiran/SaburiInformatics/swasthcare-project/swasthcare/src/containers/SelectSlot/SelectSlot.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions\";\nimport { Redirect } from \"react-router-dom\";\n\nclass SelectSlot extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handlerNextBtnClick = () => {\n      this.state.appointmentData.slotId = this.state.slotId;\n      this.props.onSetAppointmentData(this.state.appointmentData);\n    };\n\n    this.state = {\n      slotId: null\n    };\n    this.handlerNextBtnClick.bind(this);\n  }\n\n  componentDidMount() {\n    let {\n      phyId,\n      clinicId,\n      appointmentDate\n    } = this.props.appointmentData;\n    this.props.onGetSlots(phyId, clinicId, appointmentDate);\n  }\n\n  render() {\n    if (this.props.userProfile.success === 0) {\n      sessionStorage.setItem('conferkare.appointment.activeStage', 0);\n      return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 14\n        }\n      });\n    }\n\n    return 'Slots available';\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    userProfile: state.UserProfile.userProfile,\n    profileCompliant: state.UserProfile.userProfile.dateofbirth !== '0000-00-00',\n    appointmentData: state.newAppointment.appointmentData,\n    slots: state.selectSlot.slots\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onGetSlots: (phyId, clinicId, slotDate) => dispatch(actions.getSlots(phyId, clinicId, slotDate)),\n    onSetAppointmentData: appointmentData => dispatch(actions.setAppointmentData(appointmentData))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectSlot);","map":{"version":3,"sources":["/Users/lravikiran/SaburiInformatics/swasthcare-project/swasthcare/src/containers/SelectSlot/SelectSlot.js"],"names":["React","Component","connect","actions","Redirect","SelectSlot","constructor","props","handlerNextBtnClick","state","appointmentData","slotId","onSetAppointmentData","bind","componentDidMount","phyId","clinicId","appointmentDate","onGetSlots","render","userProfile","success","sessionStorage","setItem","mapStateToProps","UserProfile","profileCompliant","dateofbirth","newAppointment","slots","selectSlot","mapDispatchToProps","dispatch","slotDate","getSlots","setAppointmentData"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,qBAAzB;AACA,SAAQC,QAAR,QAAuB,kBAAvB;;AAEA,MAAMC,UAAN,SAAyBJ,SAAzB,CAAmC;AACjCK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAanBC,mBAbmB,GAaG,MAAM;AAC1B,WAAKC,KAAL,CAAWC,eAAX,CAA2BC,MAA3B,GAAoC,KAAKF,KAAL,CAAWE,MAA/C;AACA,WAAKJ,KAAL,CAAWK,oBAAX,CAAgC,KAAKH,KAAL,CAAWC,eAA3C;AACD,KAhBkB;;AAEjB,SAAKD,KAAL,GAAa;AACXE,MAAAA,MAAM,EAAE;AADG,KAAb;AAGA,SAAKH,mBAAL,CAAyBK,IAAzB,CAA8B,IAA9B;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,QAAI;AAACC,MAAAA,KAAD;AAAQC,MAAAA,QAAR;AAAkBC,MAAAA;AAAlB,QAAqC,KAAKV,KAAL,CAAWG,eAApD;AACA,SAAKH,KAAL,CAAWW,UAAX,CAAsBH,KAAtB,EAA6BC,QAA7B,EAAuCC,eAAvC;AACD;;AAODE,EAAAA,MAAM,GAAG;AACP,QAAI,KAAKZ,KAAL,CAAWa,WAAX,CAAuBC,OAAvB,KAAmC,CAAvC,EAA0C;AACxCC,MAAAA,cAAc,CAACC,OAAf,CAAuB,oCAAvB,EAA6D,CAA7D;AACA,0BAAO,oBAAC,QAAD;AAAU,QAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;AACD,WACE,iBADF;AAGD;;AA3BgC;;AA8BnC,MAAMC,eAAe,GAAIf,KAAD,IAAW;AACjC,SAAO;AACLW,IAAAA,WAAW,EAAEX,KAAK,CAACgB,WAAN,CAAkBL,WAD1B;AAELM,IAAAA,gBAAgB,EAAEjB,KAAK,CAACgB,WAAN,CAAkBL,WAAlB,CAA8BO,WAA9B,KAA8C,YAF3D;AAGLjB,IAAAA,eAAe,EAAED,KAAK,CAACmB,cAAN,CAAqBlB,eAHjC;AAILmB,IAAAA,KAAK,EAAEpB,KAAK,CAACqB,UAAN,CAAiBD;AAJnB,GAAP;AAMD,CAPD;;AASA,MAAME,kBAAkB,GAAIC,QAAD,IAAc;AACvC,SAAO;AACLd,IAAAA,UAAU,EAAE,CAACH,KAAD,EAAQC,QAAR,EAAkBiB,QAAlB,KAA+BD,QAAQ,CAAC7B,OAAO,CAAC+B,QAAR,CAAiBnB,KAAjB,EAAwBC,QAAxB,EAAkCiB,QAAlC,CAAD,CAD9C;AAELrB,IAAAA,oBAAoB,EAAGF,eAAD,IAAqBsB,QAAQ,CAAC7B,OAAO,CAACgC,kBAAR,CAA2BzB,eAA3B,CAAD;AAF9C,GAAP;AAID,CALD;;AAOA,eAAeR,OAAO,CAACsB,eAAD,EAAkBO,kBAAlB,CAAP,CAA6C1B,UAA7C,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport * as actions from \"../../store/actions\";\nimport {Redirect} from \"react-router-dom\";\n\nclass SelectSlot extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      slotId: null\n    };\n    this.handlerNextBtnClick.bind(this);\n  }\n  \n  componentDidMount() {\n    let {phyId, clinicId, appointmentDate} = this.props.appointmentData;\n    this.props.onGetSlots(phyId, clinicId, appointmentDate);\n  }\n  \n  handlerNextBtnClick = () => {\n    this.state.appointmentData.slotId = this.state.slotId;\n    this.props.onSetAppointmentData(this.state.appointmentData);\n  };\n  \n  render() {\n    if (this.props.userProfile.success === 0) {\n      sessionStorage.setItem('conferkare.appointment.activeStage', 0);\n      return <Redirect to='/'/>;\n    }\n    return (\n      'Slots available'\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    userProfile: state.UserProfile.userProfile,\n    profileCompliant: state.UserProfile.userProfile.dateofbirth !== '0000-00-00',\n    appointmentData: state.newAppointment.appointmentData,\n    slots: state.selectSlot.slots\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onGetSlots: (phyId, clinicId, slotDate) => dispatch(actions.getSlots(phyId, clinicId, slotDate)),\n    onSetAppointmentData: (appointmentData) => dispatch(actions.setAppointmentData(appointmentData))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SelectSlot);"]},"metadata":{},"sourceType":"module"}