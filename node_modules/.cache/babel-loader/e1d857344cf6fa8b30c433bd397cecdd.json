{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.ReactTelephoneInput = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _class, _temp, _initialiseProps;\n\nvar _cramda = require('cramda');\n\nvar _cramda2 = _interopRequireDefault(_cramda);\n\nvar _reactTinyVirtualList = require('react-tiny-virtual-list');\n\nvar _reactTinyVirtualList2 = _interopRequireDefault(_reactTinyVirtualList);\n\nvar _debounce = require('debounce');\n\nvar _debounce2 = _interopRequireDefault(_debounce);\n\nvar _lodash = require('lodash.memoize');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _reactClickOutside = require('react-click-outside');\n\nvar _reactClickOutside2 = _interopRequireDefault(_reactClickOutside);\n\nvar _countryTelephoneData = require('country-telephone-data');\n\nvar _countryTelephoneData2 = _interopRequireDefault(_countryTelephoneData);\n\nvar _format_number = require('./format_number');\n\nvar _format_number2 = _interopRequireDefault(_format_number);\n\nvar _replace_country_code = require('./replace_country_code');\n\nvar _replace_country_code2 = _interopRequireDefault(_replace_country_code);\n\nvar _number_validator = require('./number_validator');\n\nvar _number_validator2 = _interopRequireDefault(_number_validator);\n\nvar _guessSelectedCountry = require('./guessSelectedCountry');\n\nvar _guessSelectedCountry2 = _interopRequireDefault(_guessSelectedCountry);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar find = _cramda2.default.find,\n    propEq = _cramda2.default.propEq,\n    equals = _cramda2.default.equals,\n    findIndex = _cramda2.default.findIndex,\n    startsWith = _cramda2.default.startsWith;\nvar allCountries = _countryTelephoneData2.default.allCountries,\n    iso2Lookup = _countryTelephoneData2.default.iso2Lookup;\nvar isModernBrowser = true;\n\nif (typeof document !== 'undefined') {\n  isModernBrowser = Boolean(document.createElement('input').setSelectionRange);\n} else {\n  isModernBrowser = true;\n}\n\nvar keys = {\n  UP: 38,\n  DOWN: 40,\n  RIGHT: 39,\n  LEFT: 37,\n  ENTER: 13,\n  ESC: 27,\n  PLUS: 43,\n  A: 65,\n  Z: 90,\n  SPACE: 32\n};\n\nfunction getDropdownListWidth() {\n  var defaultWidth = 400;\n  var horizontalMargin = 20;\n\n  if (window.innerWidth - horizontalMargin < defaultWidth) {\n    return window.innerWidth - horizontalMargin;\n  } else {\n    return defaultWidth;\n  }\n}\n\nvar ReactTelephoneInput = exports.ReactTelephoneInput = (_temp = _class = function (_Component) {\n  _inherits(ReactTelephoneInput, _Component);\n\n  function ReactTelephoneInput(props) {\n    _classCallCheck(this, ReactTelephoneInput);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _initialiseProps.call(_this);\n\n    var preferredCountries = props.preferredCountries.map(function (iso2) {\n      return Object.prototype.hasOwnProperty.call(iso2Lookup, iso2) ? allCountries[iso2Lookup[iso2]] : null;\n    }).filter(function (val) {\n      return val !== null;\n    });\n    _this.state = {\n      firstCall: true,\n      preferredCountries: preferredCountries,\n      showDropDown: false,\n      queryString: '',\n      freezeSelection: false,\n      debouncedQueryStingSearcher: (0, _debounce2.default)(_this.searchCountry, 600)\n    };\n    return _this;\n  }\n\n  ReactTelephoneInput.prototype.componentDidMount = function componentDidMount() {\n    this._cursorToEnd(true);\n  };\n\n  ReactTelephoneInput.prototype.shouldComponentUpdate = function shouldComponentUpdate(nextProps, nextState) {\n    return !equals(nextProps, this.props) || !equals(nextState, this.state);\n  };\n\n  ReactTelephoneInput.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {\n    var inputNumber = void 0;\n\n    if (props.value) {\n      inputNumber = props.value;\n    } else if (props.initialValue && state.firstCall) {\n      inputNumber = props.initialValue;\n    } else if (props.value === null) {\n      // just clear the value\n      inputNumber = '';\n    } else if (state && state.formattedNumber && state.formattedNumber.length > 0) {\n      inputNumber = state.formattedNumber;\n    } else {\n      inputNumber = '';\n    }\n\n    var selectedCountryGuess = (0, _guessSelectedCountry2.default)(inputNumber.replace(/\\D/g, ''), props);\n    var selectedCountryGuessIndex = findIndex(propEq('iso2', selectedCountryGuess.iso2), allCountries);\n    var formattedNumber = (0, _format_number2.default)(inputNumber.replace(/\\D/g, ''), selectedCountryGuess ? selectedCountryGuess.format : null, props.autoFormat);\n    return {\n      firstCall: false,\n      selectedCountry: selectedCountryGuess,\n      highlightCountryIndex: selectedCountryGuessIndex,\n      formattedNumber: formattedNumber\n    };\n  }; // put the cursor to the end of the input (usually after a focus event)\n  // memoize search results... caching all the way\n\n\n  ReactTelephoneInput.prototype.render = function render() {\n    var _this2 = this;\n\n    var arrowClasses = (0, _classnames2.default)({\n      arrow: true,\n      up: this.state.showDropDown\n    });\n    var inputClasses = (0, _classnames2.default)({\n      'form-control': true,\n      'invalid-number': !this.props.isValid(this.state.formattedNumber.replace(/\\D/g, ''))\n    });\n    var flagViewClasses = (0, _classnames2.default)({\n      'flag-dropdown': true,\n      'open-dropdown': this.state.showDropDown\n    });\n    var inputFlagClasses = 'flag ' + this.state.selectedCountry.iso2;\n    var buttonProps = this.props.buttonProps;\n    var otherProps = this.props.inputProps;\n\n    if (this.props.inputId) {\n      otherProps.id = this.props.inputId;\n    }\n\n    return _react2.default.createElement('div', {\n      className: (0, _classnames2.default)('react-tel-input', this.props.classNames, this.props.className),\n      'data-test-id': 'src_reacttelephoneinput_test_id_4'\n    }, _react2.default.createElement('div', {\n      className: flagViewClasses,\n      onKeyDown: this.handleKeydown,\n      'data-test-id': 'src_reacttelephoneinput_test_id_6'\n    }, _react2.default.createElement('button', _extends({\n      onClick: this.handleFlagDropdownClick,\n      className: 'selected-flag',\n      title: this.state.selectedCountry.name + ': + ' + this.state.selectedCountry.dialCode,\n      'data-test-id': 'src_reacttelephoneinput_test_id_7',\n      onKeyDown: this.handleFlagKeyDown,\n      type: 'button'\n    }, buttonProps), _react2.default.createElement('div', {\n      className: inputFlagClasses,\n      style: this.getFlagStyle(),\n      'data-test-id': 'src_reacttelephoneinput_test_id_8'\n    }, _react2.default.createElement('div', {\n      className: arrowClasses,\n      'data-test-id': 'src_reacttelephoneinput_test_id_9'\n    }))), this.state.showDropDown ? this.getCountryDropDownList() : ''), _react2.default.createElement('input', _extends({\n      onChange: this.handleInput,\n      onClick: this.handleInputClick,\n      onFocus: this.handleInputFocus,\n      onBlur: this.handleInputBlur,\n      onKeyDown: this.handleInputKeyDown,\n      value: this.state.formattedNumber,\n      ref: function ref(node) {\n        _this2.numberInputRef = node;\n      },\n      type: 'tel',\n      className: inputClasses,\n      autoComplete: this.props.autoComplete,\n      pattern: this.props.pattern,\n      required: this.props.required,\n      placeholder: this.props.placeholder,\n      disabled: this.props.disabled\n    }, otherProps, {\n      'data-test-id': 'src_reacttelephoneinput_test_id_5'\n    })));\n  };\n\n  return ReactTelephoneInput;\n}(_react.Component), _class.defaultProps = {\n  autoFormat: true,\n  onlyCountries: allCountries,\n  defaultCountry: allCountries[0].iso2,\n  isValid: _number_validator2.default,\n  flagsImagePath: 'flags.png',\n  onEnterKeyPress: function onEnterKeyPress() {},\n  preferredCountries: [],\n  disabled: false,\n  placeholder: '+1 (702) 123-4567',\n  autoComplete: 'tel',\n  required: false,\n  inputProps: {},\n  buttonProps: {},\n  listItemClassName: 'country',\n  listStyle: {\n    zIndex: 20,\n    backgroundColor: 'white'\n  }\n}, _initialiseProps = function _initialiseProps() {\n  var _this3 = this;\n\n  this.numberInputRef = null;\n\n  this._cursorToEnd = function (skipFocus) {\n    var input = _this3.numberInputRef;\n\n    if (skipFocus) {\n      _this3._fillDialCode();\n    } else {\n      input.focus();\n\n      if (isModernBrowser) {\n        var len = input.value.length;\n        input.setSelectionRange(len, len);\n      }\n    }\n  };\n\n  this.handleFlagDropdownClick = function (e) {\n    if (_this3.props.disabled) {\n      return;\n    }\n\n    e.preventDefault();\n    var _state = _this3.state,\n        preferredCountries = _state.preferredCountries,\n        selectedCountry = _state.selectedCountry;\n    var onlyCountries = _this3.props.onlyCountries; // need to put the highlight on the current selected country if the dropdown is going to open up\n\n    _this3.setState({\n      showDropDown: !_this3.state.showDropDown,\n      highlightCountry: find(equals(_this3.state.selectedCountry), _this3.props.onlyCountries),\n      highlightCountryIndex: findIndex(propEq('iso2', selectedCountry.iso2), preferredCountries.concat(onlyCountries))\n    });\n  };\n\n  this.handleInput = function (event) {\n    var formattedNumber = '+';\n    var newSelectedCountry = _this3.state.selectedCountry;\n    var freezeSelection = _this3.state.freezeSelection; // if the input is the same as before, must be some special key like enter, alt, command etc.\n\n    if (event.target.value === _this3.state.formattedNumber) {\n      return;\n    }\n\n    if (event.preventDefault) {\n      event.preventDefault();\n    } else {\n      // ie hack\n      event.returnValue = false; // eslint-disable-line no-param-reassign\n    }\n\n    if (event.target.value && event.target.value.length > 0) {\n      // before entering the number in new format,\n      // lets check if the dial code now matches some other country\n      // replace all non-numeric characters from the input string\n      var inputNumber = event.target.value.replace(/\\D/g, ''); // we don't need to send the whole number to guess the country...\n      // only the first 6 characters are enough\n      // the guess country function can then use memoization much more effectively\n      // since the set of input it gets has drastically reduced\n\n      if (!_this3.state.freezeSelection || _this3.state.selectedCountry.dialCode.length > inputNumber.length) {\n        newSelectedCountry = (0, _guessSelectedCountry2.default)(inputNumber.substring(0, 6), _this3.props);\n        freezeSelection = false;\n      }\n\n      formattedNumber = (0, _format_number2.default)(inputNumber, newSelectedCountry.format, _this3.props.autoFormat);\n    }\n\n    var caretPosition = event.target.selectionStart;\n    var oldFormattedText = _this3.state.formattedNumber;\n    var diff = formattedNumber.length - oldFormattedText.length;\n    var selectedCountry = newSelectedCountry.dialCode.length > 0 ? newSelectedCountry : _this3.state.selectedCountry;\n\n    _this3.setState({\n      formattedNumber: formattedNumber,\n      freezeSelection: freezeSelection,\n      selectedCountry: selectedCountry\n    }, function () {\n      if (isModernBrowser) {\n        if (caretPosition === 1 && formattedNumber.length === 2) {\n          caretPosition += 1;\n        }\n\n        if (diff > 0) {\n          caretPosition -= diff;\n        }\n\n        if (caretPosition > 0 && oldFormattedText.length >= formattedNumber.length) {\n          if (_this3.numberInputRef) {\n            _this3.numberInputRef.setSelectionRange(caretPosition, caretPosition);\n          }\n        }\n      }\n\n      if (_this3.props.onChange) {\n        _this3.props.onChange(formattedNumber, selectedCountry);\n      }\n    });\n  };\n\n  this.handleInputClick = function () {\n    _this3.setState({\n      showDropDown: false\n    });\n  };\n\n  this.handleFlagItemClick = function (country) {\n    var currentSelectedCountry = _this3.state.selectedCountry;\n    var nextSelectedCountry = find(equals(country), _this3.props.onlyCountries); // tiny optimization\n\n    if (currentSelectedCountry.iso2 !== nextSelectedCountry.iso2) {\n      var newNumber = (0, _replace_country_code2.default)(currentSelectedCountry, nextSelectedCountry, _this3.state.formattedNumber.replace(/\\D/g, '') // let's convert formatted number to just numbers for easy find/replace\n      );\n      var formattedNumber = (0, _format_number2.default)(newNumber, nextSelectedCountry.format, _this3.props.autoFormat);\n\n      _this3.setState({\n        showDropDown: false,\n        selectedCountry: nextSelectedCountry,\n        freezeSelection: true,\n        formattedNumber: formattedNumber\n      }, function () {\n        _this3._cursorToEnd();\n\n        if (_this3.props.onChange) {\n          _this3.props.onChange(formattedNumber, nextSelectedCountry);\n        }\n      });\n    } else {\n      _this3.setState({\n        showDropDown: false\n      });\n    }\n  };\n\n  this.handleInputFocus = function () {\n    // trigger parent component's onFocus handler\n    if (typeof _this3.props.onFocus === 'function') {\n      _this3.props.onFocus(_this3.state.formattedNumber, _this3.state.selectedCountry);\n    }\n\n    _this3._fillDialCode();\n  };\n\n  this._fillDialCode = function () {\n    // if the input is blank, insert dial code of the selected country\n    if (_this3.numberInputRef && _this3.numberInputRef.value === '+') {\n      _this3.setState({\n        formattedNumber: '+' + _this3.state.selectedCountry.dialCode\n      });\n    }\n  };\n\n  this._getHighlightCountryIndex = function (direction) {\n    // had to write own function because underscore does not have findIndex. lodash has it\n    var highlightCountryIndex = _this3.state.highlightCountryIndex + direction;\n\n    if (highlightCountryIndex < 0 || highlightCountryIndex >= _this3.props.onlyCountries.length + _this3.state.preferredCountries.length) {\n      return highlightCountryIndex - direction;\n    }\n\n    return highlightCountryIndex;\n  };\n\n  this._searchCountry = (0, _lodash2.default)(function searchCountry(queryString) {\n    if (!queryString || queryString.length === 0) {\n      return null;\n    } // don't include the preferred countries in search\n\n\n    var probableCountries = this.props.onlyCountries.filter(function (country) {\n      return startsWith(queryString.toLowerCase(), country.name.toLowerCase());\n    }, this);\n    return probableCountries[0];\n  });\n\n  this.searchCountry = function () {\n    var probableCandidate = _this3._searchCountry(_this3.state.queryString) || _this3.props.onlyCountries[0];\n\n    var probableCandidateIndex = findIndex(propEq('iso2', probableCandidate.iso2), _this3.props.onlyCountries) + _this3.state.preferredCountries.length;\n\n    _this3.setState({\n      queryString: '',\n      highlightCountryIndex: probableCandidateIndex\n    });\n  };\n\n  this.handleKeydown = function (event) {\n    if (!_this3.state.showDropDown || event.metaKey || event.altKey) {\n      return;\n    } // ie hack\n\n\n    if (event.preventDefault) {\n      event.preventDefault();\n    } else {\n      event.returnValue = false; // eslint-disable-line no-param-reassign\n    }\n\n    var self = _this3;\n\n    function _moveHighlight(direction) {\n      self.setState({\n        highlightCountryIndex: self._getHighlightCountryIndex(direction)\n      });\n    }\n\n    switch (event.which) {\n      case keys.DOWN:\n        _moveHighlight(1);\n\n        break;\n\n      case keys.UP:\n        _moveHighlight(-1);\n\n        break;\n\n      case keys.ENTER:\n        _this3.handleFlagItemClick(_this3.state.preferredCountries.concat(_this3.props.onlyCountries)[_this3.state.highlightCountryIndex], event);\n\n        break;\n\n      case keys.ESC:\n        _this3.setState({\n          showDropDown: false\n        }, _this3._cursorToEnd);\n\n        break;\n\n      default:\n        if (event.which >= keys.A && event.which <= keys.Z || event.which === keys.SPACE) {\n          _this3.setState({\n            queryString: _this3.state.queryString + String.fromCharCode(event.which)\n          }, _this3.state.debouncedQueryStingSearcher);\n        }\n\n    }\n  };\n\n  this.handleInputKeyDown = function (event) {\n    if (event.which === keys.ENTER && typeof _this3.props.onEnterKeyPress === 'function') {\n      _this3.props.onEnterKeyPress(event);\n    }\n  };\n\n  this.handleClickOutside = function () {\n    if (_this3.state.showDropDown) {\n      _this3.setState({\n        showDropDown: false\n      });\n    }\n  };\n\n  this.getCountryDropDownList = function () {\n    var data = _this3.state.preferredCountries.concat(_this3.props.onlyCountries);\n\n    return _react2.default.createElement(_reactTinyVirtualList2.default, {\n      width: getDropdownListWidth(),\n      height: 300,\n      itemCount: data.length,\n      itemSize: 40,\n      style: _this3.props.listStyle,\n      className: 'country-list',\n      scrollToIndex: _this3.state.highlightCountryIndex,\n      scrollToAlignment: 'center',\n      renderItem: function renderItem(_ref) {\n        var index = _ref.index,\n            style = _ref.style;\n        var country = data[index];\n        var itemClasses = (0, _classnames2.default)(_this3.props.listItemClassName, {\n          preferred: findIndex(propEq('iso2', country.iso2), _this3.state.preferredCountries) >= 0,\n          highlight: _this3.state.highlightCountryIndex === index\n        });\n        var inputFlagClasses = 'flag ' + country.iso2;\n        return _react2.default.createElement('div', {\n          key: 'flag_no_' + index,\n          'data-flag-key': 'flag_no_' + index,\n          className: itemClasses,\n          'data-dial-code': country.dialCode,\n          'data-country-code': country.iso2,\n          onClick: _this3.handleFlagItemClick.bind(_this3, country),\n          style: style,\n          title: country.name + ' - ' + country.dialCode,\n          'data-test-id': 'src_reacttelephoneinput_test_id_0'\n        }, _react2.default.createElement('div', {\n          className: inputFlagClasses,\n          style: _this3.getFlagStyle(),\n          'data-test-id': 'src_reacttelephoneinput_test_id_1'\n        }), _react2.default.createElement('span', {\n          className: 'country-name',\n          'data-test-id': 'src_reacttelephoneinput_test_id_2'\n        }, country.name), _react2.default.createElement('span', {\n          className: 'dial-code',\n          'data-test-id': 'src_reacttelephoneinput_test_id_3'\n        }, '+' + country.dialCode));\n      }\n    });\n  };\n\n  this.getFlagStyle = function () {\n    if (_this3.props.flagsImagePath) {\n      return {\n        backgroundImage: 'url(' + _this3.props.flagsImagePath + ')'\n      };\n    }\n\n    return {};\n  };\n\n  this.handleInputBlur = function () {\n    if (typeof _this3.props.onBlur === 'function') {\n      _this3.props.onBlur(_this3.state.formattedNumber, _this3.state.selectedCountry);\n    }\n  };\n\n  this.handleFlagKeyDown = function (event) {\n    // only trigger dropdown click if the dropdown is not already open.\n    // it will otherwise interfere with key up/down of list\n    if (event.which === keys.DOWN && _this3.state.showDropDown === false) {\n      _this3.handleFlagDropdownClick(event);\n    }\n  };\n}, _temp);\nReactTelephoneInput.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  value: _propTypes2.default.string,\n  initialValue: _propTypes2.default.string,\n  autoFormat: _propTypes2.default.bool,\n  defaultCountry: _propTypes2.default.string,\n  isValid: _propTypes2.default.func,\n  onlyCountries: _propTypes2.default.arrayOf(_propTypes2.default.object),\n  preferredCountries: _propTypes2.default.arrayOf(_propTypes2.default.string),\n  flagsImagePath: _propTypes2.default.string,\n  placeholder: _propTypes2.default.string,\n  autoComplete: _propTypes2.default.string,\n  classNames: _propTypes2.default.string,\n  className: _propTypes2.default.string,\n  inputId: _propTypes2.default.string,\n  onChange: _propTypes2.default.func,\n  onEnterKeyPress: _propTypes2.default.func,\n  onBlur: _propTypes2.default.func,\n  onFocus: _propTypes2.default.func,\n  disabled: _propTypes2.default.bool,\n  pattern: _propTypes2.default.string,\n  required: _propTypes2.default.bool,\n  inputProps: _propTypes2.default.object,\n  buttonProps: _propTypes2.default.object,\n  listStyle: _propTypes2.default.object,\n  listItemClassName: _propTypes2.default.string\n} : {};\nexports.default = (0, _reactClickOutside2.default)(ReactTelephoneInput);","map":null,"metadata":{},"sourceType":"script"}