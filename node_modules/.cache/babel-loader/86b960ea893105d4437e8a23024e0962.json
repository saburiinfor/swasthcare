{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.4.1): button.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\nimport $ from 'jquery';\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME = 'button';\nconst VERSION = '4.4.1';\nconst DATA_KEY = 'bs.button';\nconst EVENT_KEY = `.${DATA_KEY}`;\nconst DATA_API_KEY = '.data-api';\nconst JQUERY_NO_CONFLICT = $.fn[NAME];\nconst ClassName = {\n  ACTIVE: 'active',\n  BUTTON: 'btn',\n  FOCUS: 'focus'\n};\nconst Selector = {\n  DATA_TOGGLE_CARROT: '[data-toggle^=\"button\"]',\n  DATA_TOGGLES: '[data-toggle=\"buttons\"]',\n  DATA_TOGGLE: '[data-toggle=\"button\"]',\n  DATA_TOGGLES_BUTTONS: '[data-toggle=\"buttons\"] .btn',\n  INPUT: 'input:not([type=\"hidden\"])',\n  ACTIVE: '.active',\n  BUTTON: '.btn'\n};\nconst Event = {\n  CLICK_DATA_API: `click${EVENT_KEY}${DATA_API_KEY}`,\n  FOCUS_BLUR_DATA_API: `focus${EVENT_KEY}${DATA_API_KEY} ` + `blur${EVENT_KEY}${DATA_API_KEY}`,\n  LOAD_DATA_API: `load${EVENT_KEY}${DATA_API_KEY}`\n};\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Button {\n  constructor(element) {\n    this._element = element;\n  } // Getters\n\n\n  static get VERSION() {\n    return VERSION;\n  } // Public\n\n\n  toggle() {\n    let triggerChangeEvent = true;\n    let addAriaPressed = true;\n    const rootElement = $(this._element).closest(Selector.DATA_TOGGLES)[0];\n\n    if (rootElement) {\n      const input = this._element.querySelector(Selector.INPUT);\n\n      if (input) {\n        if (input.type === 'radio') {\n          if (input.checked && this._element.classList.contains(ClassName.ACTIVE)) {\n            triggerChangeEvent = false;\n          } else {\n            const activeElement = rootElement.querySelector(Selector.ACTIVE);\n\n            if (activeElement) {\n              $(activeElement).removeClass(ClassName.ACTIVE);\n            }\n          }\n        } else if (input.type === 'checkbox') {\n          if (this._element.tagName === 'LABEL' && input.checked === this._element.classList.contains(ClassName.ACTIVE)) {\n            triggerChangeEvent = false;\n          }\n        } else {\n          // if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input\n          triggerChangeEvent = false;\n        }\n\n        if (triggerChangeEvent) {\n          input.checked = !this._element.classList.contains(ClassName.ACTIVE);\n          $(input).trigger('change');\n        }\n\n        input.focus();\n        addAriaPressed = false;\n      }\n    }\n\n    if (!(this._element.hasAttribute('disabled') || this._element.classList.contains('disabled'))) {\n      if (addAriaPressed) {\n        this._element.setAttribute('aria-pressed', !this._element.classList.contains(ClassName.ACTIVE));\n      }\n\n      if (triggerChangeEvent) {\n        $(this._element).toggleClass(ClassName.ACTIVE);\n      }\n    }\n  }\n\n  dispose() {\n    $.removeData(this._element, DATA_KEY);\n    this._element = null;\n  } // Static\n\n\n  static _jQueryInterface(config) {\n    return this.each(function () {\n      let data = $(this).data(DATA_KEY);\n\n      if (!data) {\n        data = new Button(this);\n        $(this).data(DATA_KEY, data);\n      }\n\n      if (config === 'toggle') {\n        data[config]();\n      }\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\n$(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE_CARROT, event => {\n  let button = event.target;\n\n  if (!$(button).hasClass(ClassName.BUTTON)) {\n    button = $(button).closest(Selector.BUTTON)[0];\n  }\n\n  if (!button || button.hasAttribute('disabled') || button.classList.contains('disabled')) {\n    event.preventDefault(); // work around Firefox bug #1540995\n  } else {\n    const inputBtn = button.querySelector(Selector.INPUT);\n\n    if (inputBtn && (inputBtn.hasAttribute('disabled') || inputBtn.classList.contains('disabled'))) {\n      event.preventDefault(); // work around Firefox bug #1540995\n\n      return;\n    }\n\n    Button._jQueryInterface.call($(button), 'toggle');\n  }\n}).on(Event.FOCUS_BLUR_DATA_API, Selector.DATA_TOGGLE_CARROT, event => {\n  const button = $(event.target).closest(Selector.BUTTON)[0];\n  $(button).toggleClass(ClassName.FOCUS, /^focus(in)?$/.test(event.type));\n});\n$(window).on(Event.LOAD_DATA_API, () => {\n  // ensure correct active class is set to match the controls' actual values/states\n  // find all checkboxes/readio buttons inside data-toggle groups\n  let buttons = [].slice.call(document.querySelectorAll(Selector.DATA_TOGGLES_BUTTONS));\n\n  for (let i = 0, len = buttons.length; i < len; i++) {\n    const button = buttons[i];\n    const input = button.querySelector(Selector.INPUT);\n\n    if (input.checked || input.hasAttribute('checked')) {\n      button.classList.add(ClassName.ACTIVE);\n    } else {\n      button.classList.remove(ClassName.ACTIVE);\n    }\n  } // find all button toggles\n\n\n  buttons = [].slice.call(document.querySelectorAll(Selector.DATA_TOGGLE));\n\n  for (let i = 0, len = buttons.length; i < len; i++) {\n    const button = buttons[i];\n\n    if (button.getAttribute('aria-pressed') === 'true') {\n      button.classList.add(ClassName.ACTIVE);\n    } else {\n      button.classList.remove(ClassName.ACTIVE);\n    }\n  }\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\n$.fn[NAME] = Button._jQueryInterface;\n$.fn[NAME].Constructor = Button;\n\n$.fn[NAME].noConflict = () => {\n  $.fn[NAME] = JQUERY_NO_CONFLICT;\n  return Button._jQueryInterface;\n};\n\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}