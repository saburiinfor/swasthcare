{"ast":null,"code":"import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport { syncHistoryWithStore } from 'react-router-redux';\nimport { browserHistory } from \"react-router\";\nimport { routerReducer } from \"react-router-redux\";\nimport authReducer from './store/reducers/auth';\nimport createUserReducer from './store/reducers/createUser';\nimport appointmentGroupReducer from './store/reducers/appointmentGroup';\nimport userDashboardReducer from './store/reducers/UserDashboard';\nimport userProfiledReducer from './store/reducers/UserProfile';\nimport logoutReducer from './store/reducers/logout';\nimport selectPhysicianReducer from './store/reducers/selectPhysician';\nimport mediaElementGroupReducer from './store/reducers/mediaElementGroup';\nimport newAppointmentReducer from './store/reducers/newAppointment';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\n\nconst persistConfig = {\n  key: 'root',\n  storage\n};\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  createUser: createUserReducer,\n  appointmentGroup: appointmentGroupReducer,\n  UserDashboard: userDashboardReducer,\n  UserProfile: userProfiledReducer,\n  logout: logoutReducer,\n  selectPhysician: selectPhysicianReducer,\n  mediaElementGroup: mediaElementGroupReducer,\n  newAppointment: newAppointmentReducer,\n  routing: routerReducer\n});\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst initializeStore = () => {\n  return createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n};\n\nconst getOrInitializeStore = () => {\n  debugger;\n\n  if (typeof window === 'undefined') {\n    return initializeStore;\n  } else {\n    if (!window.store) {\n      window.store = initializeStore();\n    }\n\n    return window.store;\n  }\n};\n\nconst reduxStore = getOrInitializeStore();\npersistStore(reduxStore);\nexport const history = syncHistoryWithStore(browserHistory, reduxStore);\nexport default reduxStore;","map":{"version":3,"sources":["/Users/lravikiran/SaburiInformatics/swasthcare-project/swasthcare/src/store.js"],"names":["createStore","applyMiddleware","compose","combineReducers","thunk","syncHistoryWithStore","browserHistory","routerReducer","authReducer","createUserReducer","appointmentGroupReducer","userDashboardReducer","userProfiledReducer","logoutReducer","selectPhysicianReducer","mediaElementGroupReducer","newAppointmentReducer","persistStore","persistReducer","storage","persistConfig","key","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","rootReducer","auth","createUser","appointmentGroup","UserDashboard","UserProfile","logout","selectPhysician","mediaElementGroup","newAppointment","routing","persistedReducer","initializeStore","getOrInitializeStore","store","reduxStore","history"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,OAAvC,EAAgDC,eAAhD,QAAuE,OAAvE;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,oBAAT,QAAqC,oBAArC;AACA,SAASC,cAAT,QAA+B,cAA/B;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,WAAP,MAAwB,uBAAxB;AACA,OAAOC,iBAAP,MAA8B,6BAA9B;AACA,OAAOC,uBAAP,MAAoC,mCAApC;AACA,OAAOC,oBAAP,MAAiC,gCAAjC;AACA,OAAOC,mBAAP,MAAgC,8BAAhC;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AACA,OAAOC,sBAAP,MAAmC,kCAAnC;AACA,OAAOC,wBAAP,MAAqC,oCAArC;AACA,OAAOC,qBAAP,MAAkC,iCAAlC;AACA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB,C,CAAgD;;AAEhD,MAAMC,aAAa,GAAG;AACpBC,EAAAA,GAAG,EAAE,MADe;AAEpBF,EAAAA;AAFoB,CAAtB;AAKA,MAAMG,gBAAgB,GAAGC,MAAM,CAACC,oCAAP,IAA+CtB,OAAxE;AAEA,MAAMuB,WAAW,GAAGtB,eAAe,CAAC;AAClCuB,EAAAA,IAAI,EAAElB,WAD4B;AAElCmB,EAAAA,UAAU,EAAElB,iBAFsB;AAGlCmB,EAAAA,gBAAgB,EAAElB,uBAHgB;AAIlCmB,EAAAA,aAAa,EAAElB,oBAJmB;AAKlCmB,EAAAA,WAAW,EAAElB,mBALqB;AAMlCmB,EAAAA,MAAM,EAAElB,aAN0B;AAOlCmB,EAAAA,eAAe,EAAElB,sBAPiB;AAQlCmB,EAAAA,iBAAiB,EAAElB,wBARe;AASlCmB,EAAAA,cAAc,EAAElB,qBATkB;AAUlCmB,EAAAA,OAAO,EAAE5B;AAVyB,CAAD,CAAnC;AAaA,MAAM6B,gBAAgB,GAAGlB,cAAc,CAACE,aAAD,EAAgBK,WAAhB,CAAvC;;AAEA,MAAMY,eAAe,GAAG,MAAM;AAC5B,SAAOrC,WAAW,CAACyB,WAAD,EAAcH,gBAAgB,CAC9CrB,eAAe,CAACG,KAAD,CAD+B,CAA9B,CAAlB;AAGD,CAJD;;AAMA,MAAMkC,oBAAoB,GAAG,MAAM;AACjC;;AACA,MAAI,OAAOf,MAAP,KAAkB,WAAtB,EAAmC;AACjC,WAAOc,eAAP;AACD,GAFD,MAEO;AACL,QAAI,CAACd,MAAM,CAACgB,KAAZ,EAAmB;AACjBhB,MAAAA,MAAM,CAACgB,KAAP,GAAeF,eAAe,EAA9B;AACD;;AACD,WAAOd,MAAM,CAACgB,KAAd;AACD;AACF,CAVD;;AAYA,MAAMC,UAAU,GAAGF,oBAAoB,EAAvC;AACArB,YAAY,CAACuB,UAAD,CAAZ;AAEA,OAAO,MAAMC,OAAO,GAAGpC,oBAAoB,CAACC,cAAD,EAAiBkC,UAAjB,CAApC;AAEP,eAAeA,UAAf","sourcesContent":["import { createStore, applyMiddleware, compose, combineReducers } from 'redux';\nimport thunk from 'redux-thunk';\nimport { syncHistoryWithStore } from 'react-router-redux';\nimport { browserHistory } from \"react-router\";\nimport { routerReducer } from \"react-router-redux\";\nimport authReducer from './store/reducers/auth';\nimport createUserReducer from './store/reducers/createUser';\nimport appointmentGroupReducer from './store/reducers/appointmentGroup';\nimport userDashboardReducer from './store/reducers/UserDashboard';\nimport userProfiledReducer from './store/reducers/UserProfile';\nimport logoutReducer from './store/reducers/logout';\nimport selectPhysicianReducer from './store/reducers/selectPhysician';\nimport mediaElementGroupReducer from './store/reducers/mediaElementGroup';\nimport newAppointmentReducer from './store/reducers/newAppointment';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage' // defaults to localStorage for web\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n};\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst rootReducer = combineReducers({\n  auth: authReducer,\n  createUser: createUserReducer,\n  appointmentGroup: appointmentGroupReducer,\n  UserDashboard: userDashboardReducer,\n  UserProfile: userProfiledReducer,\n  logout: logoutReducer,\n  selectPhysician: selectPhysicianReducer,\n  mediaElementGroup: mediaElementGroupReducer,\n  newAppointment: newAppointmentReducer,\n  routing: routerReducer\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst initializeStore = () => {\n  return createStore(rootReducer, composeEnhancers(\n    applyMiddleware(thunk)\n  ));\n};\n\nconst getOrInitializeStore = () => {\n  debugger;\n  if (typeof window === 'undefined') {\n    return initializeStore;\n  } else {\n    if (!window.store) {\n      window.store = initializeStore();\n    }\n    return window.store;\n  }\n};\n\nconst reduxStore = getOrInitializeStore();\npersistStore(reduxStore);\n\nexport const history = syncHistoryWithStore(browserHistory, reduxStore);\n\nexport default reduxStore;"]},"metadata":{},"sourceType":"module"}