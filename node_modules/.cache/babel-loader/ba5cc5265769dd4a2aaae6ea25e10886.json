{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.4.1): popover.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\nimport $ from 'jquery';\nimport Tooltip from './tooltip';\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME = 'popover';\nconst VERSION = '4.4.1';\nconst DATA_KEY = 'bs.popover';\nconst EVENT_KEY = `.${DATA_KEY}`;\nconst JQUERY_NO_CONFLICT = $.fn[NAME];\nconst CLASS_PREFIX = 'bs-popover';\nconst BSCLS_PREFIX_REGEX = new RegExp(`(^|\\\\s)${CLASS_PREFIX}\\\\S+`, 'g');\nconst Default = { ...Tooltip.Default,\n  placement: 'right',\n  trigger: 'click',\n  content: '',\n  template: '<div class=\"popover\" role=\"tooltip\">' + '<div class=\"arrow\"></div>' + '<h3 class=\"popover-header\"></h3>' + '<div class=\"popover-body\"></div></div>'\n};\nconst DefaultType = { ...Tooltip.DefaultType,\n  content: '(string|element|function)'\n};\nconst ClassName = {\n  FADE: 'fade',\n  SHOW: 'show'\n};\nconst Selector = {\n  TITLE: '.popover-header',\n  CONTENT: '.popover-body'\n};\nconst Event = {\n  HIDE: `hide${EVENT_KEY}`,\n  HIDDEN: `hidden${EVENT_KEY}`,\n  SHOW: `show${EVENT_KEY}`,\n  SHOWN: `shown${EVENT_KEY}`,\n  INSERTED: `inserted${EVENT_KEY}`,\n  CLICK: `click${EVENT_KEY}`,\n  FOCUSIN: `focusin${EVENT_KEY}`,\n  FOCUSOUT: `focusout${EVENT_KEY}`,\n  MOUSEENTER: `mouseenter${EVENT_KEY}`,\n  MOUSELEAVE: `mouseleave${EVENT_KEY}`\n};\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Popover extends Tooltip {\n  // Getters\n  static get VERSION() {\n    return VERSION;\n  }\n\n  static get Default() {\n    return Default;\n  }\n\n  static get NAME() {\n    return NAME;\n  }\n\n  static get DATA_KEY() {\n    return DATA_KEY;\n  }\n\n  static get Event() {\n    return Event;\n  }\n\n  static get EVENT_KEY() {\n    return EVENT_KEY;\n  }\n\n  static get DefaultType() {\n    return DefaultType;\n  } // Overrides\n\n\n  isWithContent() {\n    return this.getTitle() || this._getContent();\n  }\n\n  addAttachmentClass(attachment) {\n    $(this.getTipElement()).addClass(`${CLASS_PREFIX}-${attachment}`);\n  }\n\n  getTipElement() {\n    this.tip = this.tip || $(this.config.template)[0];\n    return this.tip;\n  }\n\n  setContent() {\n    const $tip = $(this.getTipElement()); // We use append for html objects to maintain js events\n\n    this.setElementContent($tip.find(Selector.TITLE), this.getTitle());\n\n    let content = this._getContent();\n\n    if (typeof content === 'function') {\n      content = content.call(this.element);\n    }\n\n    this.setElementContent($tip.find(Selector.CONTENT), content);\n    $tip.removeClass(`${ClassName.FADE} ${ClassName.SHOW}`);\n  } // Private\n\n\n  _getContent() {\n    return this.element.getAttribute('data-content') || this.config.content;\n  }\n\n  _cleanTipClass() {\n    const $tip = $(this.getTipElement());\n    const tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);\n\n    if (tabClass !== null && tabClass.length > 0) {\n      $tip.removeClass(tabClass.join(''));\n    }\n  } // Static\n\n\n  static _jQueryInterface(config) {\n    return this.each(function () {\n      let data = $(this).data(DATA_KEY);\n\n      const _config = typeof config === 'object' ? config : null;\n\n      if (!data && /dispose|hide/.test(config)) {\n        return;\n      }\n\n      if (!data) {\n        data = new Popover(this, _config);\n        $(this).data(DATA_KEY, data);\n      }\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config]();\n      }\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\n\n$.fn[NAME] = Popover._jQueryInterface;\n$.fn[NAME].Constructor = Popover;\n\n$.fn[NAME].noConflict = () => {\n  $.fn[NAME] = JQUERY_NO_CONFLICT;\n  return Popover._jQueryInterface;\n};\n\nexport default Popover;","map":null,"metadata":{},"sourceType":"module"}