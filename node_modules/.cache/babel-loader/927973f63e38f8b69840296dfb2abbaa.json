{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.4.1): collapse.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\nimport $ from 'jquery';\nimport Util from './util';\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME = 'collapse';\nconst VERSION = '4.4.1';\nconst DATA_KEY = 'bs.collapse';\nconst EVENT_KEY = `.${DATA_KEY}`;\nconst DATA_API_KEY = '.data-api';\nconst JQUERY_NO_CONFLICT = $.fn[NAME];\nconst Default = {\n  toggle: true,\n  parent: ''\n};\nconst DefaultType = {\n  toggle: 'boolean',\n  parent: '(string|element)'\n};\nconst Event = {\n  SHOW: `show${EVENT_KEY}`,\n  SHOWN: `shown${EVENT_KEY}`,\n  HIDE: `hide${EVENT_KEY}`,\n  HIDDEN: `hidden${EVENT_KEY}`,\n  CLICK_DATA_API: `click${EVENT_KEY}${DATA_API_KEY}`\n};\nconst ClassName = {\n  SHOW: 'show',\n  COLLAPSE: 'collapse',\n  COLLAPSING: 'collapsing',\n  COLLAPSED: 'collapsed'\n};\nconst Dimension = {\n  WIDTH: 'width',\n  HEIGHT: 'height'\n};\nconst Selector = {\n  ACTIVES: '.show, .collapsing',\n  DATA_TOGGLE: '[data-toggle=\"collapse\"]'\n};\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Collapse {\n  constructor(element, config) {\n    this._isTransitioning = false;\n    this._element = element;\n    this._config = this._getConfig(config);\n    this._triggerArray = [].slice.call(document.querySelectorAll(`[data-toggle=\"collapse\"][href=\"#${element.id}\"],` + `[data-toggle=\"collapse\"][data-target=\"#${element.id}\"]`));\n    const toggleList = [].slice.call(document.querySelectorAll(Selector.DATA_TOGGLE));\n\n    for (let i = 0, len = toggleList.length; i < len; i++) {\n      const elem = toggleList[i];\n      const selector = Util.getSelectorFromElement(elem);\n      const filterElement = [].slice.call(document.querySelectorAll(selector)).filter(foundElem => foundElem === element);\n\n      if (selector !== null && filterElement.length > 0) {\n        this._selector = selector;\n\n        this._triggerArray.push(elem);\n      }\n    }\n\n    this._parent = this._config.parent ? this._getParent() : null;\n\n    if (!this._config.parent) {\n      this._addAriaAndCollapsedClass(this._element, this._triggerArray);\n    }\n\n    if (this._config.toggle) {\n      this.toggle();\n    }\n  } // Getters\n\n\n  static get VERSION() {\n    return VERSION;\n  }\n\n  static get Default() {\n    return Default;\n  } // Public\n\n\n  toggle() {\n    if ($(this._element).hasClass(ClassName.SHOW)) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  show() {\n    if (this._isTransitioning || $(this._element).hasClass(ClassName.SHOW)) {\n      return;\n    }\n\n    let actives;\n    let activesData;\n\n    if (this._parent) {\n      actives = [].slice.call(this._parent.querySelectorAll(Selector.ACTIVES)).filter(elem => {\n        if (typeof this._config.parent === 'string') {\n          return elem.getAttribute('data-parent') === this._config.parent;\n        }\n\n        return elem.classList.contains(ClassName.COLLAPSE);\n      });\n\n      if (actives.length === 0) {\n        actives = null;\n      }\n    }\n\n    if (actives) {\n      activesData = $(actives).not(this._selector).data(DATA_KEY);\n\n      if (activesData && activesData._isTransitioning) {\n        return;\n      }\n    }\n\n    const startEvent = $.Event(Event.SHOW);\n    $(this._element).trigger(startEvent);\n\n    if (startEvent.isDefaultPrevented()) {\n      return;\n    }\n\n    if (actives) {\n      Collapse._jQueryInterface.call($(actives).not(this._selector), 'hide');\n\n      if (!activesData) {\n        $(actives).data(DATA_KEY, null);\n      }\n    }\n\n    const dimension = this._getDimension();\n\n    $(this._element).removeClass(ClassName.COLLAPSE).addClass(ClassName.COLLAPSING);\n    this._element.style[dimension] = 0;\n\n    if (this._triggerArray.length) {\n      $(this._triggerArray).removeClass(ClassName.COLLAPSED).attr('aria-expanded', true);\n    }\n\n    this.setTransitioning(true);\n\n    const complete = () => {\n      $(this._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).addClass(ClassName.SHOW);\n      this._element.style[dimension] = '';\n      this.setTransitioning(false);\n      $(this._element).trigger(Event.SHOWN);\n    };\n\n    const capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);\n    const scrollSize = `scroll${capitalizedDimension}`;\n    const transitionDuration = Util.getTransitionDurationFromElement(this._element);\n    $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\n    this._element.style[dimension] = `${this._element[scrollSize]}px`;\n  }\n\n  hide() {\n    if (this._isTransitioning || !$(this._element).hasClass(ClassName.SHOW)) {\n      return;\n    }\n\n    const startEvent = $.Event(Event.HIDE);\n    $(this._element).trigger(startEvent);\n\n    if (startEvent.isDefaultPrevented()) {\n      return;\n    }\n\n    const dimension = this._getDimension();\n\n    this._element.style[dimension] = `${this._element.getBoundingClientRect()[dimension]}px`;\n    Util.reflow(this._element);\n    $(this._element).addClass(ClassName.COLLAPSING).removeClass(ClassName.COLLAPSE).removeClass(ClassName.SHOW);\n    const triggerArrayLength = this._triggerArray.length;\n\n    if (triggerArrayLength > 0) {\n      for (let i = 0; i < triggerArrayLength; i++) {\n        const trigger = this._triggerArray[i];\n        const selector = Util.getSelectorFromElement(trigger);\n\n        if (selector !== null) {\n          const $elem = $([].slice.call(document.querySelectorAll(selector)));\n\n          if (!$elem.hasClass(ClassName.SHOW)) {\n            $(trigger).addClass(ClassName.COLLAPSED).attr('aria-expanded', false);\n          }\n        }\n      }\n    }\n\n    this.setTransitioning(true);\n\n    const complete = () => {\n      this.setTransitioning(false);\n      $(this._element).removeClass(ClassName.COLLAPSING).addClass(ClassName.COLLAPSE).trigger(Event.HIDDEN);\n    };\n\n    this._element.style[dimension] = '';\n    const transitionDuration = Util.getTransitionDurationFromElement(this._element);\n    $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\n  }\n\n  setTransitioning(isTransitioning) {\n    this._isTransitioning = isTransitioning;\n  }\n\n  dispose() {\n    $.removeData(this._element, DATA_KEY);\n    this._config = null;\n    this._parent = null;\n    this._element = null;\n    this._triggerArray = null;\n    this._isTransitioning = null;\n  } // Private\n\n\n  _getConfig(config) {\n    config = { ...Default,\n      ...config\n    };\n    config.toggle = Boolean(config.toggle); // Coerce string values\n\n    Util.typeCheckConfig(NAME, config, DefaultType);\n    return config;\n  }\n\n  _getDimension() {\n    const hasWidth = $(this._element).hasClass(Dimension.WIDTH);\n    return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;\n  }\n\n  _getParent() {\n    let parent;\n\n    if (Util.isElement(this._config.parent)) {\n      parent = this._config.parent; // It's a jQuery object\n\n      if (typeof this._config.parent.jquery !== 'undefined') {\n        parent = this._config.parent[0];\n      }\n    } else {\n      parent = document.querySelector(this._config.parent);\n    }\n\n    const selector = `[data-toggle=\"collapse\"][data-parent=\"${this._config.parent}\"]`;\n    const children = [].slice.call(parent.querySelectorAll(selector));\n    $(children).each((i, element) => {\n      this._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);\n    });\n    return parent;\n  }\n\n  _addAriaAndCollapsedClass(element, triggerArray) {\n    const isOpen = $(element).hasClass(ClassName.SHOW);\n\n    if (triggerArray.length) {\n      $(triggerArray).toggleClass(ClassName.COLLAPSED, !isOpen).attr('aria-expanded', isOpen);\n    }\n  } // Static\n\n\n  static _getTargetFromElement(element) {\n    const selector = Util.getSelectorFromElement(element);\n    return selector ? document.querySelector(selector) : null;\n  }\n\n  static _jQueryInterface(config) {\n    return this.each(function () {\n      const $this = $(this);\n      let data = $this.data(DATA_KEY);\n      const _config = { ...Default,\n        ...$this.data(),\n        ...(typeof config === 'object' && config ? config : {})\n      };\n\n      if (!data && _config.toggle && /show|hide/.test(config)) {\n        _config.toggle = false;\n      }\n\n      if (!data) {\n        data = new Collapse(this, _config);\n        $this.data(DATA_KEY, data);\n      }\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config]();\n      }\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\n$(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\n  // preventDefault only for <a> elements (which change the URL) not inside the collapsible element\n  if (event.currentTarget.tagName === 'A') {\n    event.preventDefault();\n  }\n\n  const $trigger = $(this);\n  const selector = Util.getSelectorFromElement(this);\n  const selectors = [].slice.call(document.querySelectorAll(selector));\n  $(selectors).each(function () {\n    const $target = $(this);\n    const data = $target.data(DATA_KEY);\n    const config = data ? 'toggle' : $trigger.data();\n\n    Collapse._jQueryInterface.call($target, config);\n  });\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\n$.fn[NAME] = Collapse._jQueryInterface;\n$.fn[NAME].Constructor = Collapse;\n\n$.fn[NAME].noConflict = () => {\n  $.fn[NAME] = JQUERY_NO_CONFLICT;\n  return Collapse._jQueryInterface;\n};\n\nexport default Collapse;","map":null,"metadata":{},"sourceType":"module"}