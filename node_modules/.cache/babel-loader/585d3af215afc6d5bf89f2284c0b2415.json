{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.4.1): toast.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\nimport $ from 'jquery';\nimport Util from './util';\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME = 'toast';\nconst VERSION = '4.4.1';\nconst DATA_KEY = 'bs.toast';\nconst EVENT_KEY = `.${DATA_KEY}`;\nconst JQUERY_NO_CONFLICT = $.fn[NAME];\nconst Event = {\n  CLICK_DISMISS: `click.dismiss${EVENT_KEY}`,\n  HIDE: `hide${EVENT_KEY}`,\n  HIDDEN: `hidden${EVENT_KEY}`,\n  SHOW: `show${EVENT_KEY}`,\n  SHOWN: `shown${EVENT_KEY}`\n};\nconst ClassName = {\n  FADE: 'fade',\n  HIDE: 'hide',\n  SHOW: 'show',\n  SHOWING: 'showing'\n};\nconst DefaultType = {\n  animation: 'boolean',\n  autohide: 'boolean',\n  delay: 'number'\n};\nconst Default = {\n  animation: true,\n  autohide: true,\n  delay: 500\n};\nconst Selector = {\n  DATA_DISMISS: '[data-dismiss=\"toast\"]'\n};\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Toast {\n  constructor(element, config) {\n    this._element = element;\n    this._config = this._getConfig(config);\n    this._timeout = null;\n\n    this._setListeners();\n  } // Getters\n\n\n  static get VERSION() {\n    return VERSION;\n  }\n\n  static get DefaultType() {\n    return DefaultType;\n  }\n\n  static get Default() {\n    return Default;\n  } // Public\n\n\n  show() {\n    const showEvent = $.Event(Event.SHOW);\n    $(this._element).trigger(showEvent);\n\n    if (showEvent.isDefaultPrevented()) {\n      return;\n    }\n\n    if (this._config.animation) {\n      this._element.classList.add(ClassName.FADE);\n    }\n\n    const complete = () => {\n      this._element.classList.remove(ClassName.SHOWING);\n\n      this._element.classList.add(ClassName.SHOW);\n\n      $(this._element).trigger(Event.SHOWN);\n\n      if (this._config.autohide) {\n        this._timeout = setTimeout(() => {\n          this.hide();\n        }, this._config.delay);\n      }\n    };\n\n    this._element.classList.remove(ClassName.HIDE);\n\n    Util.reflow(this._element);\n\n    this._element.classList.add(ClassName.SHOWING);\n\n    if (this._config.animation) {\n      const transitionDuration = Util.getTransitionDurationFromElement(this._element);\n      $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\n    } else {\n      complete();\n    }\n  }\n\n  hide() {\n    if (!this._element.classList.contains(ClassName.SHOW)) {\n      return;\n    }\n\n    const hideEvent = $.Event(Event.HIDE);\n    $(this._element).trigger(hideEvent);\n\n    if (hideEvent.isDefaultPrevented()) {\n      return;\n    }\n\n    this._close();\n  }\n\n  dispose() {\n    clearTimeout(this._timeout);\n    this._timeout = null;\n\n    if (this._element.classList.contains(ClassName.SHOW)) {\n      this._element.classList.remove(ClassName.SHOW);\n    }\n\n    $(this._element).off(Event.CLICK_DISMISS);\n    $.removeData(this._element, DATA_KEY);\n    this._element = null;\n    this._config = null;\n  } // Private\n\n\n  _getConfig(config) {\n    config = { ...Default,\n      ...$(this._element).data(),\n      ...(typeof config === 'object' && config ? config : {})\n    };\n    Util.typeCheckConfig(NAME, config, this.constructor.DefaultType);\n    return config;\n  }\n\n  _setListeners() {\n    $(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, () => this.hide());\n  }\n\n  _close() {\n    const complete = () => {\n      this._element.classList.add(ClassName.HIDE);\n\n      $(this._element).trigger(Event.HIDDEN);\n    };\n\n    this._element.classList.remove(ClassName.SHOW);\n\n    if (this._config.animation) {\n      const transitionDuration = Util.getTransitionDurationFromElement(this._element);\n      $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);\n    } else {\n      complete();\n    }\n  } // Static\n\n\n  static _jQueryInterface(config) {\n    return this.each(function () {\n      const $element = $(this);\n      let data = $element.data(DATA_KEY);\n\n      const _config = typeof config === 'object' && config;\n\n      if (!data) {\n        data = new Toast(this, _config);\n        $element.data(DATA_KEY, data);\n      }\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config](this);\n      }\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\n\n$.fn[NAME] = Toast._jQueryInterface;\n$.fn[NAME].Constructor = Toast;\n\n$.fn[NAME].noConflict = () => {\n  $.fn[NAME] = JQUERY_NO_CONFLICT;\n  return Toast._jQueryInterface;\n};\n\nexport default Toast;","map":null,"metadata":{},"sourceType":"module"}