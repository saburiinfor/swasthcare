{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.4.1): modal.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\nimport $ from 'jquery';\nimport Util from './util';\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME = 'modal';\nconst VERSION = '4.4.1';\nconst DATA_KEY = 'bs.modal';\nconst EVENT_KEY = `.${DATA_KEY}`;\nconst DATA_API_KEY = '.data-api';\nconst JQUERY_NO_CONFLICT = $.fn[NAME];\nconst ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key\n\nconst Default = {\n  backdrop: true,\n  keyboard: true,\n  focus: true,\n  show: true\n};\nconst DefaultType = {\n  backdrop: '(boolean|string)',\n  keyboard: 'boolean',\n  focus: 'boolean',\n  show: 'boolean'\n};\nconst Event = {\n  HIDE: `hide${EVENT_KEY}`,\n  HIDE_PREVENTED: `hidePrevented${EVENT_KEY}`,\n  HIDDEN: `hidden${EVENT_KEY}`,\n  SHOW: `show${EVENT_KEY}`,\n  SHOWN: `shown${EVENT_KEY}`,\n  FOCUSIN: `focusin${EVENT_KEY}`,\n  RESIZE: `resize${EVENT_KEY}`,\n  CLICK_DISMISS: `click.dismiss${EVENT_KEY}`,\n  KEYDOWN_DISMISS: `keydown.dismiss${EVENT_KEY}`,\n  MOUSEUP_DISMISS: `mouseup.dismiss${EVENT_KEY}`,\n  MOUSEDOWN_DISMISS: `mousedown.dismiss${EVENT_KEY}`,\n  CLICK_DATA_API: `click${EVENT_KEY}${DATA_API_KEY}`\n};\nconst ClassName = {\n  SCROLLABLE: 'modal-dialog-scrollable',\n  SCROLLBAR_MEASURER: 'modal-scrollbar-measure',\n  BACKDROP: 'modal-backdrop',\n  OPEN: 'modal-open',\n  FADE: 'fade',\n  SHOW: 'show',\n  STATIC: 'modal-static'\n};\nconst Selector = {\n  DIALOG: '.modal-dialog',\n  MODAL_BODY: '.modal-body',\n  DATA_TOGGLE: '[data-toggle=\"modal\"]',\n  DATA_DISMISS: '[data-dismiss=\"modal\"]',\n  FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',\n  STICKY_CONTENT: '.sticky-top'\n};\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Modal {\n  constructor(element, config) {\n    this._config = this._getConfig(config);\n    this._element = element;\n    this._dialog = element.querySelector(Selector.DIALOG);\n    this._backdrop = null;\n    this._isShown = false;\n    this._isBodyOverflowing = false;\n    this._ignoreBackdropClick = false;\n    this._isTransitioning = false;\n    this._scrollbarWidth = 0;\n  } // Getters\n\n\n  static get VERSION() {\n    return VERSION;\n  }\n\n  static get Default() {\n    return Default;\n  } // Public\n\n\n  toggle(relatedTarget) {\n    return this._isShown ? this.hide() : this.show(relatedTarget);\n  }\n\n  show(relatedTarget) {\n    if (this._isShown || this._isTransitioning) {\n      return;\n    }\n\n    if ($(this._element).hasClass(ClassName.FADE)) {\n      this._isTransitioning = true;\n    }\n\n    const showEvent = $.Event(Event.SHOW, {\n      relatedTarget\n    });\n    $(this._element).trigger(showEvent);\n\n    if (this._isShown || showEvent.isDefaultPrevented()) {\n      return;\n    }\n\n    this._isShown = true;\n\n    this._checkScrollbar();\n\n    this._setScrollbar();\n\n    this._adjustDialog();\n\n    this._setEscapeEvent();\n\n    this._setResizeEvent();\n\n    $(this._element).on(Event.CLICK_DISMISS, Selector.DATA_DISMISS, event => this.hide(event));\n    $(this._dialog).on(Event.MOUSEDOWN_DISMISS, () => {\n      $(this._element).one(Event.MOUSEUP_DISMISS, event => {\n        if ($(event.target).is(this._element)) {\n          this._ignoreBackdropClick = true;\n        }\n      });\n    });\n\n    this._showBackdrop(() => this._showElement(relatedTarget));\n  }\n\n  hide(event) {\n    if (event) {\n      event.preventDefault();\n    }\n\n    if (!this._isShown || this._isTransitioning) {\n      return;\n    }\n\n    const hideEvent = $.Event(Event.HIDE);\n    $(this._element).trigger(hideEvent);\n\n    if (!this._isShown || hideEvent.isDefaultPrevented()) {\n      return;\n    }\n\n    this._isShown = false;\n    const transition = $(this._element).hasClass(ClassName.FADE);\n\n    if (transition) {\n      this._isTransitioning = true;\n    }\n\n    this._setEscapeEvent();\n\n    this._setResizeEvent();\n\n    $(document).off(Event.FOCUSIN);\n    $(this._element).removeClass(ClassName.SHOW);\n    $(this._element).off(Event.CLICK_DISMISS);\n    $(this._dialog).off(Event.MOUSEDOWN_DISMISS);\n\n    if (transition) {\n      const transitionDuration = Util.getTransitionDurationFromElement(this._element);\n      $(this._element).one(Util.TRANSITION_END, event => this._hideModal(event)).emulateTransitionEnd(transitionDuration);\n    } else {\n      this._hideModal();\n    }\n  }\n\n  dispose() {\n    [window, this._element, this._dialog].forEach(htmlElement => $(htmlElement).off(EVENT_KEY));\n    /**\n     * `document` has 2 events `Event.FOCUSIN` and `Event.CLICK_DATA_API`\n     * Do not move `document` in `htmlElements` array\n     * It will remove `Event.CLICK_DATA_API` event that should remain\n     */\n\n    $(document).off(Event.FOCUSIN);\n    $.removeData(this._element, DATA_KEY);\n    this._config = null;\n    this._element = null;\n    this._dialog = null;\n    this._backdrop = null;\n    this._isShown = null;\n    this._isBodyOverflowing = null;\n    this._ignoreBackdropClick = null;\n    this._isTransitioning = null;\n    this._scrollbarWidth = null;\n  }\n\n  handleUpdate() {\n    this._adjustDialog();\n  } // Private\n\n\n  _getConfig(config) {\n    config = { ...Default,\n      ...config\n    };\n    Util.typeCheckConfig(NAME, config, DefaultType);\n    return config;\n  }\n\n  _triggerBackdropTransition() {\n    if (this._config.backdrop === 'static') {\n      const hideEventPrevented = $.Event(Event.HIDE_PREVENTED);\n      $(this._element).trigger(hideEventPrevented);\n\n      if (hideEventPrevented.defaultPrevented) {\n        return;\n      }\n\n      this._element.classList.add(ClassName.STATIC);\n\n      const modalTransitionDuration = Util.getTransitionDurationFromElement(this._element);\n      $(this._element).one(Util.TRANSITION_END, () => {\n        this._element.classList.remove(ClassName.STATIC);\n      }).emulateTransitionEnd(modalTransitionDuration);\n\n      this._element.focus();\n    } else {\n      this.hide();\n    }\n  }\n\n  _showElement(relatedTarget) {\n    const transition = $(this._element).hasClass(ClassName.FADE);\n    const modalBody = this._dialog ? this._dialog.querySelector(Selector.MODAL_BODY) : null;\n\n    if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {\n      // Don't move modal's DOM position\n      document.body.appendChild(this._element);\n    }\n\n    this._element.style.display = 'block';\n\n    this._element.removeAttribute('aria-hidden');\n\n    this._element.setAttribute('aria-modal', true);\n\n    if ($(this._dialog).hasClass(ClassName.SCROLLABLE) && modalBody) {\n      modalBody.scrollTop = 0;\n    } else {\n      this._element.scrollTop = 0;\n    }\n\n    if (transition) {\n      Util.reflow(this._element);\n    }\n\n    $(this._element).addClass(ClassName.SHOW);\n\n    if (this._config.focus) {\n      this._enforceFocus();\n    }\n\n    const shownEvent = $.Event(Event.SHOWN, {\n      relatedTarget\n    });\n\n    const transitionComplete = () => {\n      if (this._config.focus) {\n        this._element.focus();\n      }\n\n      this._isTransitioning = false;\n      $(this._element).trigger(shownEvent);\n    };\n\n    if (transition) {\n      const transitionDuration = Util.getTransitionDurationFromElement(this._dialog);\n      $(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(transitionDuration);\n    } else {\n      transitionComplete();\n    }\n  }\n\n  _enforceFocus() {\n    $(document).off(Event.FOCUSIN) // Guard against infinite focus loop\n    .on(Event.FOCUSIN, event => {\n      if (document !== event.target && this._element !== event.target && $(this._element).has(event.target).length === 0) {\n        this._element.focus();\n      }\n    });\n  }\n\n  _setEscapeEvent() {\n    if (this._isShown && this._config.keyboard) {\n      $(this._element).on(Event.KEYDOWN_DISMISS, event => {\n        if (event.which === ESCAPE_KEYCODE) {\n          this._triggerBackdropTransition();\n        }\n      });\n    } else if (!this._isShown) {\n      $(this._element).off(Event.KEYDOWN_DISMISS);\n    }\n  }\n\n  _setResizeEvent() {\n    if (this._isShown) {\n      $(window).on(Event.RESIZE, event => this.handleUpdate(event));\n    } else {\n      $(window).off(Event.RESIZE);\n    }\n  }\n\n  _hideModal() {\n    this._element.style.display = 'none';\n\n    this._element.setAttribute('aria-hidden', true);\n\n    this._element.removeAttribute('aria-modal');\n\n    this._isTransitioning = false;\n\n    this._showBackdrop(() => {\n      $(document.body).removeClass(ClassName.OPEN);\n\n      this._resetAdjustments();\n\n      this._resetScrollbar();\n\n      $(this._element).trigger(Event.HIDDEN);\n    });\n  }\n\n  _removeBackdrop() {\n    if (this._backdrop) {\n      $(this._backdrop).remove();\n      this._backdrop = null;\n    }\n  }\n\n  _showBackdrop(callback) {\n    const animate = $(this._element).hasClass(ClassName.FADE) ? ClassName.FADE : '';\n\n    if (this._isShown && this._config.backdrop) {\n      this._backdrop = document.createElement('div');\n      this._backdrop.className = ClassName.BACKDROP;\n\n      if (animate) {\n        this._backdrop.classList.add(animate);\n      }\n\n      $(this._backdrop).appendTo(document.body);\n      $(this._element).on(Event.CLICK_DISMISS, event => {\n        if (this._ignoreBackdropClick) {\n          this._ignoreBackdropClick = false;\n          return;\n        }\n\n        if (event.target !== event.currentTarget) {\n          return;\n        }\n\n        this._triggerBackdropTransition();\n      });\n\n      if (animate) {\n        Util.reflow(this._backdrop);\n      }\n\n      $(this._backdrop).addClass(ClassName.SHOW);\n\n      if (!callback) {\n        return;\n      }\n\n      if (!animate) {\n        callback();\n        return;\n      }\n\n      const backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);\n      $(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(backdropTransitionDuration);\n    } else if (!this._isShown && this._backdrop) {\n      $(this._backdrop).removeClass(ClassName.SHOW);\n\n      const callbackRemove = () => {\n        this._removeBackdrop();\n\n        if (callback) {\n          callback();\n        }\n      };\n\n      if ($(this._element).hasClass(ClassName.FADE)) {\n        const backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);\n        $(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(backdropTransitionDuration);\n      } else {\n        callbackRemove();\n      }\n    } else if (callback) {\n      callback();\n    }\n  } // ----------------------------------------------------------------------\n  // the following methods are used to handle overflowing modals\n  // todo (fat): these should probably be refactored out of modal.js\n  // ----------------------------------------------------------------------\n\n\n  _adjustDialog() {\n    const isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;\n\n    if (!this._isBodyOverflowing && isModalOverflowing) {\n      this._element.style.paddingLeft = `${this._scrollbarWidth}px`;\n    }\n\n    if (this._isBodyOverflowing && !isModalOverflowing) {\n      this._element.style.paddingRight = `${this._scrollbarWidth}px`;\n    }\n  }\n\n  _resetAdjustments() {\n    this._element.style.paddingLeft = '';\n    this._element.style.paddingRight = '';\n  }\n\n  _checkScrollbar() {\n    const rect = document.body.getBoundingClientRect();\n    this._isBodyOverflowing = rect.left + rect.right < window.innerWidth;\n    this._scrollbarWidth = this._getScrollbarWidth();\n  }\n\n  _setScrollbar() {\n    if (this._isBodyOverflowing) {\n      // Note: DOMNode.style.paddingRight returns the actual value or '' if not set\n      //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set\n      const fixedContent = [].slice.call(document.querySelectorAll(Selector.FIXED_CONTENT));\n      const stickyContent = [].slice.call(document.querySelectorAll(Selector.STICKY_CONTENT)); // Adjust fixed content padding\n\n      $(fixedContent).each((index, element) => {\n        const actualPadding = element.style.paddingRight;\n        const calculatedPadding = $(element).css('padding-right');\n        $(element).data('padding-right', actualPadding).css('padding-right', `${parseFloat(calculatedPadding) + this._scrollbarWidth}px`);\n      }); // Adjust sticky content margin\n\n      $(stickyContent).each((index, element) => {\n        const actualMargin = element.style.marginRight;\n        const calculatedMargin = $(element).css('margin-right');\n        $(element).data('margin-right', actualMargin).css('margin-right', `${parseFloat(calculatedMargin) - this._scrollbarWidth}px`);\n      }); // Adjust body padding\n\n      const actualPadding = document.body.style.paddingRight;\n      const calculatedPadding = $(document.body).css('padding-right');\n      $(document.body).data('padding-right', actualPadding).css('padding-right', `${parseFloat(calculatedPadding) + this._scrollbarWidth}px`);\n    }\n\n    $(document.body).addClass(ClassName.OPEN);\n  }\n\n  _resetScrollbar() {\n    // Restore fixed content padding\n    const fixedContent = [].slice.call(document.querySelectorAll(Selector.FIXED_CONTENT));\n    $(fixedContent).each((index, element) => {\n      const padding = $(element).data('padding-right');\n      $(element).removeData('padding-right');\n      element.style.paddingRight = padding ? padding : '';\n    }); // Restore sticky content\n\n    const elements = [].slice.call(document.querySelectorAll(`${Selector.STICKY_CONTENT}`));\n    $(elements).each((index, element) => {\n      const margin = $(element).data('margin-right');\n\n      if (typeof margin !== 'undefined') {\n        $(element).css('margin-right', margin).removeData('margin-right');\n      }\n    }); // Restore body padding\n\n    const padding = $(document.body).data('padding-right');\n    $(document.body).removeData('padding-right');\n    document.body.style.paddingRight = padding ? padding : '';\n  }\n\n  _getScrollbarWidth() {\n    // thx d.walsh\n    const scrollDiv = document.createElement('div');\n    scrollDiv.className = ClassName.SCROLLBAR_MEASURER;\n    document.body.appendChild(scrollDiv);\n    const scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;\n    document.body.removeChild(scrollDiv);\n    return scrollbarWidth;\n  } // Static\n\n\n  static _jQueryInterface(config, relatedTarget) {\n    return this.each(function () {\n      let data = $(this).data(DATA_KEY);\n      const _config = { ...Default,\n        ...$(this).data(),\n        ...(typeof config === 'object' && config ? config : {})\n      };\n\n      if (!data) {\n        data = new Modal(this, _config);\n        $(this).data(DATA_KEY, data);\n      }\n\n      if (typeof config === 'string') {\n        if (typeof data[config] === 'undefined') {\n          throw new TypeError(`No method named \"${config}\"`);\n        }\n\n        data[config](relatedTarget);\n      } else if (_config.show) {\n        data.show(relatedTarget);\n      }\n    });\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\n$(document).on(Event.CLICK_DATA_API, Selector.DATA_TOGGLE, function (event) {\n  let target;\n  const selector = Util.getSelectorFromElement(this);\n\n  if (selector) {\n    target = document.querySelector(selector);\n  }\n\n  const config = $(target).data(DATA_KEY) ? 'toggle' : { ...$(target).data(),\n    ...$(this).data()\n  };\n\n  if (this.tagName === 'A' || this.tagName === 'AREA') {\n    event.preventDefault();\n  }\n\n  const $target = $(target).one(Event.SHOW, showEvent => {\n    if (showEvent.isDefaultPrevented()) {\n      // Only register focus restorer if modal will actually get shown\n      return;\n    }\n\n    $target.one(Event.HIDDEN, () => {\n      if ($(this).is(':visible')) {\n        this.focus();\n      }\n    });\n  });\n\n  Modal._jQueryInterface.call($(target), config, this);\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\n$.fn[NAME] = Modal._jQueryInterface;\n$.fn[NAME].Constructor = Modal;\n\n$.fn[NAME].noConflict = () => {\n  $.fn[NAME] = JQUERY_NO_CONFLICT;\n  return Modal._jQueryInterface;\n};\n\nexport default Modal;","map":null,"metadata":{},"sourceType":"module"}