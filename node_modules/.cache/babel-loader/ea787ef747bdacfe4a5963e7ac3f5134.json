{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.4.1): alert.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\nimport $ from 'jquery';\nimport Util from './util';\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME = 'alert';\nconst VERSION = '4.4.1';\nconst DATA_KEY = 'bs.alert';\nconst EVENT_KEY = `.${DATA_KEY}`;\nconst DATA_API_KEY = '.data-api';\nconst JQUERY_NO_CONFLICT = $.fn[NAME];\nconst Selector = {\n  DISMISS: '[data-dismiss=\"alert\"]'\n};\nconst Event = {\n  CLOSE: `close${EVENT_KEY}`,\n  CLOSED: `closed${EVENT_KEY}`,\n  CLICK_DATA_API: `click${EVENT_KEY}${DATA_API_KEY}`\n};\nconst ClassName = {\n  ALERT: 'alert',\n  FADE: 'fade',\n  SHOW: 'show'\n};\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Alert {\n  constructor(element) {\n    this._element = element;\n  } // Getters\n\n\n  static get VERSION() {\n    return VERSION;\n  } // Public\n\n\n  close(element) {\n    let rootElement = this._element;\n\n    if (element) {\n      rootElement = this._getRootElement(element);\n    }\n\n    const customEvent = this._triggerCloseEvent(rootElement);\n\n    if (customEvent.isDefaultPrevented()) {\n      return;\n    }\n\n    this._removeElement(rootElement);\n  }\n\n  dispose() {\n    $.removeData(this._element, DATA_KEY);\n    this._element = null;\n  } // Private\n\n\n  _getRootElement(element) {\n    const selector = Util.getSelectorFromElement(element);\n    let parent = false;\n\n    if (selector) {\n      parent = document.querySelector(selector);\n    }\n\n    if (!parent) {\n      parent = $(element).closest(`.${ClassName.ALERT}`)[0];\n    }\n\n    return parent;\n  }\n\n  _triggerCloseEvent(element) {\n    const closeEvent = $.Event(Event.CLOSE);\n    $(element).trigger(closeEvent);\n    return closeEvent;\n  }\n\n  _removeElement(element) {\n    $(element).removeClass(ClassName.SHOW);\n\n    if (!$(element).hasClass(ClassName.FADE)) {\n      this._destroyElement(element);\n\n      return;\n    }\n\n    const transitionDuration = Util.getTransitionDurationFromElement(element);\n    $(element).one(Util.TRANSITION_END, event => this._destroyElement(element, event)).emulateTransitionEnd(transitionDuration);\n  }\n\n  _destroyElement(element) {\n    $(element).detach().trigger(Event.CLOSED).remove();\n  } // Static\n\n\n  static _jQueryInterface(config) {\n    return this.each(function () {\n      const $element = $(this);\n      let data = $element.data(DATA_KEY);\n\n      if (!data) {\n        data = new Alert(this);\n        $element.data(DATA_KEY, data);\n      }\n\n      if (config === 'close') {\n        data[config](this);\n      }\n    });\n  }\n\n  static _handleDismiss(alertInstance) {\n    return function (event) {\n      if (event) {\n        event.preventDefault();\n      }\n\n      alertInstance.close(this);\n    };\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\n$(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\n$.fn[NAME] = Alert._jQueryInterface;\n$.fn[NAME].Constructor = Alert;\n\n$.fn[NAME].noConflict = () => {\n  $.fn[NAME] = JQUERY_NO_CONFLICT;\n  return Alert._jQueryInterface;\n};\n\nexport default Alert;","map":null,"metadata":{},"sourceType":"module"}