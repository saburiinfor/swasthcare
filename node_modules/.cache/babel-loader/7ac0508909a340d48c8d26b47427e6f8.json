{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v4.4.1): carousel.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * --------------------------------------------------------------------------\n */\nimport $ from 'jquery';\nimport Util from './util';\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst NAME = 'carousel';\nconst VERSION = '4.4.1';\nconst DATA_KEY = 'bs.carousel';\nconst EVENT_KEY = `.${DATA_KEY}`;\nconst DATA_API_KEY = '.data-api';\nconst JQUERY_NO_CONFLICT = $.fn[NAME];\nconst ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key\n\nconst ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key\n\nconst TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch\n\nconst SWIPE_THRESHOLD = 40;\nconst Default = {\n  interval: 5000,\n  keyboard: true,\n  slide: false,\n  pause: 'hover',\n  wrap: true,\n  touch: true\n};\nconst DefaultType = {\n  interval: '(number|boolean)',\n  keyboard: 'boolean',\n  slide: '(boolean|string)',\n  pause: '(string|boolean)',\n  wrap: 'boolean',\n  touch: 'boolean'\n};\nconst Direction = {\n  NEXT: 'next',\n  PREV: 'prev',\n  LEFT: 'left',\n  RIGHT: 'right'\n};\nconst Event = {\n  SLIDE: `slide${EVENT_KEY}`,\n  SLID: `slid${EVENT_KEY}`,\n  KEYDOWN: `keydown${EVENT_KEY}`,\n  MOUSEENTER: `mouseenter${EVENT_KEY}`,\n  MOUSELEAVE: `mouseleave${EVENT_KEY}`,\n  TOUCHSTART: `touchstart${EVENT_KEY}`,\n  TOUCHMOVE: `touchmove${EVENT_KEY}`,\n  TOUCHEND: `touchend${EVENT_KEY}`,\n  POINTERDOWN: `pointerdown${EVENT_KEY}`,\n  POINTERUP: `pointerup${EVENT_KEY}`,\n  DRAG_START: `dragstart${EVENT_KEY}`,\n  LOAD_DATA_API: `load${EVENT_KEY}${DATA_API_KEY}`,\n  CLICK_DATA_API: `click${EVENT_KEY}${DATA_API_KEY}`\n};\nconst ClassName = {\n  CAROUSEL: 'carousel',\n  ACTIVE: 'active',\n  SLIDE: 'slide',\n  RIGHT: 'carousel-item-right',\n  LEFT: 'carousel-item-left',\n  NEXT: 'carousel-item-next',\n  PREV: 'carousel-item-prev',\n  ITEM: 'carousel-item',\n  POINTER_EVENT: 'pointer-event'\n};\nconst Selector = {\n  ACTIVE: '.active',\n  ACTIVE_ITEM: '.active.carousel-item',\n  ITEM: '.carousel-item',\n  ITEM_IMG: '.carousel-item img',\n  NEXT_PREV: '.carousel-item-next, .carousel-item-prev',\n  INDICATORS: '.carousel-indicators',\n  DATA_SLIDE: '[data-slide], [data-slide-to]',\n  DATA_RIDE: '[data-ride=\"carousel\"]'\n};\nconst PointerType = {\n  TOUCH: 'touch',\n  PEN: 'pen'\n};\n/**\n * ------------------------------------------------------------------------\n * Class Definition\n * ------------------------------------------------------------------------\n */\n\nclass Carousel {\n  constructor(element, config) {\n    this._items = null;\n    this._interval = null;\n    this._activeElement = null;\n    this._isPaused = false;\n    this._isSliding = false;\n    this.touchTimeout = null;\n    this.touchStartX = 0;\n    this.touchDeltaX = 0;\n    this._config = this._getConfig(config);\n    this._element = element;\n    this._indicatorsElement = this._element.querySelector(Selector.INDICATORS);\n    this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;\n    this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent);\n\n    this._addEventListeners();\n  } // Getters\n\n\n  static get VERSION() {\n    return VERSION;\n  }\n\n  static get Default() {\n    return Default;\n  } // Public\n\n\n  next() {\n    if (!this._isSliding) {\n      this._slide(Direction.NEXT);\n    }\n  }\n\n  nextWhenVisible() {\n    // Don't call next when the page isn't visible\n    // or the carousel or its parent isn't visible\n    if (!document.hidden && $(this._element).is(':visible') && $(this._element).css('visibility') !== 'hidden') {\n      this.next();\n    }\n  }\n\n  prev() {\n    if (!this._isSliding) {\n      this._slide(Direction.PREV);\n    }\n  }\n\n  pause(event) {\n    if (!event) {\n      this._isPaused = true;\n    }\n\n    if (this._element.querySelector(Selector.NEXT_PREV)) {\n      Util.triggerTransitionEnd(this._element);\n      this.cycle(true);\n    }\n\n    clearInterval(this._interval);\n    this._interval = null;\n  }\n\n  cycle(event) {\n    if (!event) {\n      this._isPaused = false;\n    }\n\n    if (this._interval) {\n      clearInterval(this._interval);\n      this._interval = null;\n    }\n\n    if (this._config.interval && !this._isPaused) {\n      this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);\n    }\n  }\n\n  to(index) {\n    this._activeElement = this._element.querySelector(Selector.ACTIVE_ITEM);\n\n    const activeIndex = this._getItemIndex(this._activeElement);\n\n    if (index > this._items.length - 1 || index < 0) {\n      return;\n    }\n\n    if (this._isSliding) {\n      $(this._element).one(Event.SLID, () => this.to(index));\n      return;\n    }\n\n    if (activeIndex === index) {\n      this.pause();\n      this.cycle();\n      return;\n    }\n\n    const direction = index > activeIndex ? Direction.NEXT : Direction.PREV;\n\n    this._slide(direction, this._items[index]);\n  }\n\n  dispose() {\n    $(this._element).off(EVENT_KEY);\n    $.removeData(this._element, DATA_KEY);\n    this._items = null;\n    this._config = null;\n    this._element = null;\n    this._interval = null;\n    this._isPaused = null;\n    this._isSliding = null;\n    this._activeElement = null;\n    this._indicatorsElement = null;\n  } // Private\n\n\n  _getConfig(config) {\n    config = { ...Default,\n      ...config\n    };\n    Util.typeCheckConfig(NAME, config, DefaultType);\n    return config;\n  }\n\n  _handleSwipe() {\n    const absDeltax = Math.abs(this.touchDeltaX);\n\n    if (absDeltax <= SWIPE_THRESHOLD) {\n      return;\n    }\n\n    const direction = absDeltax / this.touchDeltaX;\n    this.touchDeltaX = 0; // swipe left\n\n    if (direction > 0) {\n      this.prev();\n    } // swipe right\n\n\n    if (direction < 0) {\n      this.next();\n    }\n  }\n\n  _addEventListeners() {\n    if (this._config.keyboard) {\n      $(this._element).on(Event.KEYDOWN, event => this._keydown(event));\n    }\n\n    if (this._config.pause === 'hover') {\n      $(this._element).on(Event.MOUSEENTER, event => this.pause(event)).on(Event.MOUSELEAVE, event => this.cycle(event));\n    }\n\n    if (this._config.touch) {\n      this._addTouchEventListeners();\n    }\n  }\n\n  _addTouchEventListeners() {\n    if (!this._touchSupported) {\n      return;\n    }\n\n    const start = event => {\n      if (this._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {\n        this.touchStartX = event.originalEvent.clientX;\n      } else if (!this._pointerEvent) {\n        this.touchStartX = event.originalEvent.touches[0].clientX;\n      }\n    };\n\n    const move = event => {\n      // ensure swiping with one touch and not pinching\n      if (event.originalEvent.touches && event.originalEvent.touches.length > 1) {\n        this.touchDeltaX = 0;\n      } else {\n        this.touchDeltaX = event.originalEvent.touches[0].clientX - this.touchStartX;\n      }\n    };\n\n    const end = event => {\n      if (this._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {\n        this.touchDeltaX = event.originalEvent.clientX - this.touchStartX;\n      }\n\n      this._handleSwipe();\n\n      if (this._config.pause === 'hover') {\n        // If it's a touch-enabled device, mouseenter/leave are fired as\n        // part of the mouse compatibility events on first tap - the carousel\n        // would stop cycling until user tapped out of it;\n        // here, we listen for touchend, explicitly pause the carousel\n        // (as if it's the second time we tap on it, mouseenter compat event\n        // is NOT fired) and after a timeout (to allow for mouse compatibility\n        // events to fire) we explicitly restart cycling\n        this.pause();\n\n        if (this.touchTimeout) {\n          clearTimeout(this.touchTimeout);\n        }\n\n        this.touchTimeout = setTimeout(event => this.cycle(event), TOUCHEVENT_COMPAT_WAIT + this._config.interval);\n      }\n    };\n\n    $(this._element.querySelectorAll(Selector.ITEM_IMG)).on(Event.DRAG_START, e => e.preventDefault());\n\n    if (this._pointerEvent) {\n      $(this._element).on(Event.POINTERDOWN, event => start(event));\n      $(this._element).on(Event.POINTERUP, event => end(event));\n\n      this._element.classList.add(ClassName.POINTER_EVENT);\n    } else {\n      $(this._element).on(Event.TOUCHSTART, event => start(event));\n      $(this._element).on(Event.TOUCHMOVE, event => move(event));\n      $(this._element).on(Event.TOUCHEND, event => end(event));\n    }\n  }\n\n  _keydown(event) {\n    if (/input|textarea/i.test(event.target.tagName)) {\n      return;\n    }\n\n    switch (event.which) {\n      case ARROW_LEFT_KEYCODE:\n        event.preventDefault();\n        this.prev();\n        break;\n\n      case ARROW_RIGHT_KEYCODE:\n        event.preventDefault();\n        this.next();\n        break;\n\n      default:\n    }\n  }\n\n  _getItemIndex(element) {\n    this._items = element && element.parentNode ? [].slice.call(element.parentNode.querySelectorAll(Selector.ITEM)) : [];\n    return this._items.indexOf(element);\n  }\n\n  _getItemByDirection(direction, activeElement) {\n    const isNextDirection = direction === Direction.NEXT;\n    const isPrevDirection = direction === Direction.PREV;\n\n    const activeIndex = this._getItemIndex(activeElement);\n\n    const lastItemIndex = this._items.length - 1;\n    const isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;\n\n    if (isGoingToWrap && !this._config.wrap) {\n      return activeElement;\n    }\n\n    const delta = direction === Direction.PREV ? -1 : 1;\n    const itemIndex = (activeIndex + delta) % this._items.length;\n    return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];\n  }\n\n  _triggerSlideEvent(relatedTarget, eventDirectionName) {\n    const targetIndex = this._getItemIndex(relatedTarget);\n\n    const fromIndex = this._getItemIndex(this._element.querySelector(Selector.ACTIVE_ITEM));\n\n    const slideEvent = $.Event(Event.SLIDE, {\n      relatedTarget,\n      direction: eventDirectionName,\n      from: fromIndex,\n      to: targetIndex\n    });\n    $(this._element).trigger(slideEvent);\n    return slideEvent;\n  }\n\n  _setActiveIndicatorElement(element) {\n    if (this._indicatorsElement) {\n      const indicators = [].slice.call(this._indicatorsElement.querySelectorAll(Selector.ACTIVE));\n      $(indicators).removeClass(ClassName.ACTIVE);\n\n      const nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];\n\n      if (nextIndicator) {\n        $(nextIndicator).addClass(ClassName.ACTIVE);\n      }\n    }\n  }\n\n  _slide(direction, element) {\n    const activeElement = this._element.querySelector(Selector.ACTIVE_ITEM);\n\n    const activeElementIndex = this._getItemIndex(activeElement);\n\n    const nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);\n\n    const nextElementIndex = this._getItemIndex(nextElement);\n\n    const isCycling = Boolean(this._interval);\n    let directionalClassName;\n    let orderClassName;\n    let eventDirectionName;\n\n    if (direction === Direction.NEXT) {\n      directionalClassName = ClassName.LEFT;\n      orderClassName = ClassName.NEXT;\n      eventDirectionName = Direction.LEFT;\n    } else {\n      directionalClassName = ClassName.RIGHT;\n      orderClassName = ClassName.PREV;\n      eventDirectionName = Direction.RIGHT;\n    }\n\n    if (nextElement && $(nextElement).hasClass(ClassName.ACTIVE)) {\n      this._isSliding = false;\n      return;\n    }\n\n    const slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);\n\n    if (slideEvent.isDefaultPrevented()) {\n      return;\n    }\n\n    if (!activeElement || !nextElement) {\n      // Some weirdness is happening, so we bail\n      return;\n    }\n\n    this._isSliding = true;\n\n    if (isCycling) {\n      this.pause();\n    }\n\n    this._setActiveIndicatorElement(nextElement);\n\n    const slidEvent = $.Event(Event.SLID, {\n      relatedTarget: nextElement,\n      direction: eventDirectionName,\n      from: activeElementIndex,\n      to: nextElementIndex\n    });\n\n    if ($(this._element).hasClass(ClassName.SLIDE)) {\n      $(nextElement).addClass(orderClassName);\n      Util.reflow(nextElement);\n      $(activeElement).addClass(directionalClassName);\n      $(nextElement).addClass(directionalClassName);\n      const nextElementInterval = parseInt(nextElement.getAttribute('data-interval'), 10);\n\n      if (nextElementInterval) {\n        this._config.defaultInterval = this._config.defaultInterval || this._config.interval;\n        this._config.interval = nextElementInterval;\n      } else {\n        this._config.interval = this._config.defaultInterval || this._config.interval;\n      }\n\n      const transitionDuration = Util.getTransitionDurationFromElement(activeElement);\n      $(activeElement).one(Util.TRANSITION_END, () => {\n        $(nextElement).removeClass(`${directionalClassName} ${orderClassName}`).addClass(ClassName.ACTIVE);\n        $(activeElement).removeClass(`${ClassName.ACTIVE} ${orderClassName} ${directionalClassName}`);\n        this._isSliding = false;\n        setTimeout(() => $(this._element).trigger(slidEvent), 0);\n      }).emulateTransitionEnd(transitionDuration);\n    } else {\n      $(activeElement).removeClass(ClassName.ACTIVE);\n      $(nextElement).addClass(ClassName.ACTIVE);\n      this._isSliding = false;\n      $(this._element).trigger(slidEvent);\n    }\n\n    if (isCycling) {\n      this.cycle();\n    }\n  } // Static\n\n\n  static _jQueryInterface(config) {\n    return this.each(function () {\n      let data = $(this).data(DATA_KEY);\n      let _config = { ...Default,\n        ...$(this).data()\n      };\n\n      if (typeof config === 'object') {\n        _config = { ..._config,\n          ...config\n        };\n      }\n\n      const action = typeof config === 'string' ? config : _config.slide;\n\n      if (!data) {\n        data = new Carousel(this, _config);\n        $(this).data(DATA_KEY, data);\n      }\n\n      if (typeof config === 'number') {\n        data.to(config);\n      } else if (typeof action === 'string') {\n        if (typeof data[action] === 'undefined') {\n          throw new TypeError(`No method named \"${action}\"`);\n        }\n\n        data[action]();\n      } else if (_config.interval && _config.ride) {\n        data.pause();\n        data.cycle();\n      }\n    });\n  }\n\n  static _dataApiClickHandler(event) {\n    const selector = Util.getSelectorFromElement(this);\n\n    if (!selector) {\n      return;\n    }\n\n    const target = $(selector)[0];\n\n    if (!target || !$(target).hasClass(ClassName.CAROUSEL)) {\n      return;\n    }\n\n    const config = { ...$(target).data(),\n      ...$(this).data()\n    };\n    const slideIndex = this.getAttribute('data-slide-to');\n\n    if (slideIndex) {\n      config.interval = false;\n    }\n\n    Carousel._jQueryInterface.call($(target), config);\n\n    if (slideIndex) {\n      $(target).data(DATA_KEY).to(slideIndex);\n    }\n\n    event.preventDefault();\n  }\n\n}\n/**\n * ------------------------------------------------------------------------\n * Data Api implementation\n * ------------------------------------------------------------------------\n */\n\n\n$(document).on(Event.CLICK_DATA_API, Selector.DATA_SLIDE, Carousel._dataApiClickHandler);\n$(window).on(Event.LOAD_DATA_API, () => {\n  const carousels = [].slice.call(document.querySelectorAll(Selector.DATA_RIDE));\n\n  for (let i = 0, len = carousels.length; i < len; i++) {\n    const $carousel = $(carousels[i]);\n\n    Carousel._jQueryInterface.call($carousel, $carousel.data());\n  }\n});\n/**\n * ------------------------------------------------------------------------\n * jQuery\n * ------------------------------------------------------------------------\n */\n\n$.fn[NAME] = Carousel._jQueryInterface;\n$.fn[NAME].Constructor = Carousel;\n\n$.fn[NAME].noConflict = () => {\n  $.fn[NAME] = JQUERY_NO_CONFLICT;\n  return Carousel._jQueryInterface;\n};\n\nexport default Carousel;","map":null,"metadata":{},"sourceType":"module"}