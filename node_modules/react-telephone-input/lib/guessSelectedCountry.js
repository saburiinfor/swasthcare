'use strict';

exports.__esModule = true;
exports.default = guessSelectedCountry;

var _cramda = require('cramda');

var _cramda2 = _interopRequireDefault(_cramda);

var _countryTelephoneData = require('country-telephone-data');

var _countryTelephoneData2 = _interopRequireDefault(_countryTelephoneData);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// memoize results based on the first 5/6 characters. That is all that matters

var find = _cramda2.default.find,
    propEq = _cramda2.default.propEq,
    startsWith = _cramda2.default.startsWith;
var allCountries = _countryTelephoneData2.default.allCountries,
    allCountryCodes = _countryTelephoneData2.default.allCountryCodes;
function guessSelectedCountry(inputNumber, props) {
  var defaultCountry = props.defaultCountry,
      onlyCountries = props.onlyCountries;


  var secondBestGuess = find(propEq('iso2', defaultCountry), allCountries) || onlyCountries[0];

  var inputNumberForCountries = inputNumber.substr(0, 4);
  var bestGuess = void 0;

  if (inputNumber.trim() !== '') {
    bestGuess = onlyCountries.reduce(function (selectedCountry, country) {
      // if the country dialCode exists WITH area code

      if (allCountryCodes[inputNumberForCountries] && allCountryCodes[inputNumberForCountries][0] === country.iso2) {
        return country;

        // if the selected country dialCode is there with the area code
      } else if (allCountryCodes[inputNumberForCountries] && allCountryCodes[inputNumberForCountries][0] === selectedCountry.iso2) {
        return selectedCountry;

        // else do the original if statement
      }
      if (startsWith(country.dialCode, inputNumber)) {
        if (country.dialCode.length > selectedCountry.dialCode.length) {
          return country;
        }
        if (country.dialCode.length === selectedCountry.dialCode.length && country.priority < selectedCountry.priority) {
          return country;
        }
      }

      return selectedCountry;
    }, { dialCode: '', priority: 10001 }, this);
  } else {
    return secondBestGuess;
  }

  if (!bestGuess || !bestGuess.name) {
    return secondBestGuess;
  }

  return bestGuess;
}
module.exports = exports['default'];